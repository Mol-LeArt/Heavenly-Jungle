/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.PortalDestination = exports.PortalSource = exports.reset = void 0;

var _events = require("events");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var destinationPortals = {};
var emitter = new _events.EventEmitter();

var createRoot = function createRoot(reactElement) {
  var destination = document.createElement('div');

  _reactDom["default"].findDOMNode(reactElement).appendChild(destination);

  return destination;
};

var reset = function reset() {
  emitter.removeAllListeners();
  destinationPortals = {};
};

exports.reset = reset;

var PortalSource = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(PortalSource, _React$PureComponent);

  function PortalSource(props, context) {
    var _this;

    _this = _React$PureComponent.call(this, props, context) || this;

    _defineProperty(_assertThisInitialized(_this), "setDestination", function () {
      var destination = _this.state.destination;
      var destinationPortal = destinationPortals[_this.props.name];
      if (destination && destination.portal === destinationPortal) return;

      _this.setState({
        destination: destinationPortal && {
          portal: destinationPortal,
          root: createRoot(destinationPortal)
        }
      }, _this.componentDidUpdate);
    });

    _this.state = {
      destination: null
    };
    return _this;
  }

  var _proto = PortalSource.prototype;

  _proto.componentDidMount = function componentDidMount() {
    emitter.on('destination', this.setDestination);
    this.setDestination();
    this.componentDidUpdate();
  };

  _proto.componentDidUpdate = function componentDidUpdate() {
    var _ref = this.state.destination || {},
        root = _ref.root;

    if (root) _reactDom["default"].render(_react["default"].createElement("div", null, this.props.children), root);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    emitter.removeListener('destination', this.setDestination);

    var _ref2 = this.state.destination || {},
        root = _ref2.root;

    if (root) {
      root.parentNode.removeChild(root);
    }
  };

  _proto.render = function render() {
    return null;
  };

  return PortalSource;
}(_react["default"].PureComponent);

exports.PortalSource = PortalSource;

_defineProperty(PortalSource, "propTypes", {
  name: _propTypes["default"].string.isRequired
});

var PortalDestination = /*#__PURE__*/function (_React$PureComponent2) {
  _inheritsLoose(PortalDestination, _React$PureComponent2);

  function PortalDestination() {
    return _React$PureComponent2.apply(this, arguments) || this;
  }

  var _proto2 = PortalDestination.prototype;

  _proto2.componentDidMount = function componentDidMount() {
    var name = this.props.name;

    if (name in destinationPortals) {
      console.warn("Warning: Multiple destination portals with the same name \"" + name + "\" detected.");
    }

    destinationPortals[name] = this;
    emitter.emit('destination', this);
  };

  _proto2.componentWillUnmount = function componentWillUnmount() {
    delete destinationPortals[this.props.name];
    emitter.emit('destination', this);
  };

  _proto2.render = function render() {
    return _react["default"].createElement("div", null);
  };

  return PortalDestination;
}(_react["default"].PureComponent);

exports.PortalDestination = PortalDestination;

_defineProperty(PortalDestination, "propTypes", {
  name: _propTypes["default"].string.isRequired
});