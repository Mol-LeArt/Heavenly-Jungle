/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.CheckboxDropdown = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dropdowns = require("../dropdowns");

var _checkbox = require("../checkbox");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function doNothing() {}

function getDefaultTitle(options) {
  return Object.keys(options).filter(function (key) {
    return options[key];
  }).join(', ');
}

var CheckboxDropdown = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(CheckboxDropdown, _React$Component);

  function CheckboxDropdown(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var labels = _this.props.labels;
    var options = labels;

    if (Array.isArray(labels) === true) {
      options = labels.reduce(function (result, item) {
        result[item] = true;
        return result;
      }, {});
    }

    _this.state = {
      open: false,
      options: options
    };
    return _this;
  }

  var _proto = CheckboxDropdown.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/checkbox-dropdown');

    var onChange = this.props.onChange;
    var options = this.state.options;
    onChange(options);
  };

  _proto.getTitle = function getTitle() {
    if (this.allSelected()) return 'ALL';
    var options = this.state.options;
    var customizeTitle = this.props.customizeTitle;
    var selectedOptions = customizeTitle(options);
    if (!selectedOptions) return 'NONE';
    return selectedOptions;
  };

  _proto.allSelected = function allSelected() {
    var options = this.state.options;
    return Object.values(options).every(function (val) {
      return val;
    });
  };

  _proto.toggleAll = function toggleAll(e) {
    e.stopPropagation();
    var options = this.state.options;
    var toggledVal = !this.allSelected();
    Object.keys(options).forEach(function (key) {
      return options[key] = toggledVal;
    });
    this.setState({
      options: options
    });
    var onChange = this.props.onChange;
    onChange(options);
  };

  _proto.toggleOption = function toggleOption(e, key) {
    e.stopPropagation();
    var options = this.state.options;
    options[key] = !options[key];
    this.setState({
      options: options
    });
    var onChange = this.props.onChange;
    onChange(options);
  };

  _proto.render = function render() {
    var _this2 = this;

    // eslint-disable-next-line no-unused-vars
    var _this$props = this.props,
        labels = _this$props.labels,
        onChange = _this$props.onChange,
        className = _this$props.className,
        customizeTitle = _this$props.customizeTitle,
        dropDownProps = _objectWithoutPropertiesLoose(_this$props, ["labels", "onChange", "className", "customizeTitle"]);

    var options = this.state.options;
    var dropdownItems = Object.entries(options).map(function (_ref) {
      var label = _ref[0],
          checked = _ref[1];
      return _react["default"].createElement(_checkbox.Checkbox, {
        className: "checkbox-dropdown-item-checkbox man",
        labelClassName: "pui-checkbox-dropdown-item-label",
        key: label,
        checked: checked,
        onChange: doNothing,
        onClick: function onClick(e) {
          return _this2.toggleOption(e, label);
        }
      }, label);
    });
    var checkBoxAllProps = {
      className: 'checkbox-dropdown-item-checkbox all-checkbox man',
      labelClassName: 'pui-checkbox-dropdown-item-label',
      checked: this.allSelected(),
      onClick: function onClick(e) {
        return _this2.toggleAll(e);
      },
      onChange: doNothing
    };

    var title = _react["default"].createElement("span", {
      className: "type-ellipsis"
    }, this.getTitle());

    return _react["default"].createElement(_dropdowns.Dropdown, _extends({}, dropDownProps, {
      title: title,
      closeOnMenuClick: false,
      className: (0, _classnames["default"])('checkbox-dropdown', className)
    }), _react["default"].createElement(_checkbox.Checkbox, checkBoxAllProps, "ALL"), dropdownItems);
  };

  return CheckboxDropdown;
}(_react["default"].Component);

exports.CheckboxDropdown = CheckboxDropdown;

_defineProperty(CheckboxDropdown, "propTypes", {
  buttonAriaLabel: _propTypes["default"].string,
  buttonClassName: _propTypes["default"].string,
  flat: _propTypes["default"].bool,
  labelAriaLabel: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  size: _propTypes["default"].oneOf(['normal', 'large', 'small']),
  split: _propTypes["default"].bool,
  labels: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].object]),
  customizeTitle: _propTypes["default"].func
});

_defineProperty(CheckboxDropdown, "defaultProps", {
  customizeTitle: getDefaultTitle,
  onChange: doNothing,
  size: 'normal'
});