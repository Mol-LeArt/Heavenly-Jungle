/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.Icon = void 0;

var _helpers = require("../helpers");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var Icons = _interopRequireWildcard(require("./icons"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var aliases = {
  'spinner-lg': 'spinner_lg',
  'spinner-md': 'spinner_md',
  'spinner-sm': 'spinner_sm'
};

var Icon = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Icon, _React$Component);

  function Icon() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Icon.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/iconography');
  };

  _proto.render = function render() {
    var _this$props = this.props,
        src = _this$props.src,
        verticalAlign = _this$props.verticalAlign,
        others = _objectWithoutPropertiesLoose(_this$props, ["src", "verticalAlign"]);

    var isSpinner = src.indexOf('spinner') === 0;
    var props = (0, _helpers.mergeProps)(others, {
      className: (0, _classnames["default"])('icon', "icon-" + verticalAlign, {
        'spinner': isSpinner
      })
    });
    var iconSrc = src;
    var renderedIcon = Icons[iconSrc] || Icons[aliases[iconSrc]];

    if (!renderedIcon) {
      renderedIcon = Icons.help;
      iconSrc = 'help';
      console.warn("Icon \"" + src + "\" is not recognized.");
    }

    var iconClassName = "icon-" + (isSpinner ? iconSrc.replace('_', '-') : iconSrc);
    return _react["default"].createElement("div", props, _react["default"].cloneElement(renderedIcon, {
      className: iconClassName,
      key: iconSrc
    }));
  };

  return Icon;
}(_react["default"].Component);

exports.Icon = Icon;

_defineProperty(Icon, "propTypes", {
  src: _propTypes["default"].string.isRequired,
  style: _propTypes["default"].object,
  verticalAlign: _propTypes["default"].oneOf(['middle', 'baseline'])
});

_defineProperty(Icon, "defaultProps", {
  size: 'inherit',
  style: {},
  verticalAlign: 'middle'
});