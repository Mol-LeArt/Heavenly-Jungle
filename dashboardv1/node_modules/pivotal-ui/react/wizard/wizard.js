/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.Wizard = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _buttons = require("../buttons");

var _iconography = require("../iconography");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function noop() {}

var Wizard = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Wizard, _React$Component);

  function Wizard(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      currentPage: 0
    };
    _this.onClickCancel = _this.onClickCancel.bind(_assertThisInitialized(_this));
    _this.onClickBack = _this.onClickBack.bind(_assertThisInitialized(_this));
    _this.onClickNext = _this.onClickNext.bind(_assertThisInitialized(_this));
    _this.onClickFinish = _this.onClickFinish.bind(_assertThisInitialized(_this));
    _this.setState = _this.setState.bind(_assertThisInitialized(_this));
    _this.getPage = _this.getPage.bind(_assertThisInitialized(_this));
    _this.setPage = _this.setPage.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = Wizard.prototype;

  _proto.getPage = function getPage() {
    return this.state.currentPage;
  };

  _proto.setPage = function setPage(page) {
    this.setState({
      currentPage: Math.min(this.props.pages.length - 1, Math.max(0, page))
    });
  };

  _proto.onClickCancel = function onClickCancel() {
    this.props.cancel();
  };

  _proto.onClickBack = function onClickBack() {
    var currentPage = this.state.currentPage;
    var pages = this.props.pages;
    var page = pages[currentPage];
    var onClickBack = page.onClickBack;
    var customPage = onClickBack ? onClickBack() : null;
    var target = typeof customPage === 'number' ? customPage : currentPage - 1;
    this.setPage(target);
  };

  _proto.onClickNext = function onClickNext() {
    var currentPage = this.state.currentPage;
    var pages = this.props.pages;
    var page = pages[currentPage];
    var onClickNext = page.onClickNext;
    onClickNext && onClickNext();
    this.setState({
      currentPage: this.state.currentPage + 1
    });
  };

  _proto.onClickFinish = function onClickFinish() {
    this.props.finish();
  };

  _proto.render = function render() {
    var _this$props = this.props,
        cancel = _this$props.cancel,
        cancelText = _this$props.cancelText,
        className = _this$props.className,
        pages = _this$props.pages,
        finishText = _this$props.finishText,
        style = _this$props.style,
        saving = _this$props.saving,
        savingText = _this$props.savingText;
    var currentPage = this.state.currentPage;
    var page = pages[currentPage];
    var hideBackButton = page.hideBackButton,
        hideNextButton = page.hideNextButton,
        hideFinishButton = page.hideFinishButton,
        _page$nextText = page.nextText,
        nextText = _page$nextText === void 0 ? function () {
      return 'Next';
    } : _page$nextText,
        backComponent = page.backComponent,
        finishComponent = page.finishComponent;
    var lastPage = currentPage >= pages.length - 1;
    var firstPage = currentPage === 0;
    var nextDisabled = page.nextEnabled ? !page.nextEnabled(this.getPage) : false;
    var onClickNext = this.onClickNext,
        setPage = this.setPage,
        getPage = this.getPage;
    var renderedPage = page.render({
      onClickNext: onClickNext,
      setPage: setPage,
      getPage: getPage
    });

    var cancelButton = _react["default"].createElement(_buttons.PrimaryButton, {
      alt: true,
      className: "wizard-cancel-btn",
      onClick: this.onClickCancel
    }, cancelText);

    var backButton = backComponent || _react["default"].createElement(_buttons.PrimaryButton, {
      alt: true,
      className: "wizard-back-btn",
      disabled: saving,
      onClick: this.onClickBack
    }, "Back");

    var icon = saving && _react["default"].createElement(_iconography.Icon, {
      src: "spinner-sm"
    });

    var finishButton = finishComponent || _react["default"].createElement(_buttons.PrimaryButton, {
      className: 'wizard-finish-btn',
      icon: icon,
      onClick: this.onClickFinish
    }, saving ? savingText : finishText);

    var nextButton = _react["default"].createElement(_buttons.PrimaryButton, {
      className: "wizard-next-btn",
      disabled: nextDisabled,
      onClick: this.onClickNext
    }, nextText());

    return _react["default"].createElement("div", {
      className: (0, _classnames["default"])('wizard', className),
      style: style
    }, _react["default"].createElement("div", {
      className: "wizard-page"
    }, renderedPage), _react["default"].createElement("div", {
      className: "wizard-footer grid ptxl"
    }, _react["default"].createElement("div", {
      className: "col"
    }, cancel && cancelButton, !firstPage && !hideBackButton && backButton), _react["default"].createElement("div", {
      className: "col col-fixed"
    }, !lastPage && !hideNextButton && nextButton, lastPage && !hideFinishButton && finishButton)));
  };

  return Wizard;
}(_react["default"].Component);

exports.Wizard = Wizard;

_defineProperty(Wizard, "propTypes", {
  pages: _propTypes["default"].array.isRequired,
  cancel: _propTypes["default"].func,
  cancelText: _propTypes["default"].string,
  finish: _propTypes["default"].func,
  finishText: _propTypes["default"].string,
  saving: _propTypes["default"].bool,
  savingText: _propTypes["default"].string
});

_defineProperty(Wizard, "defaultProps", {
  pages: [],
  cancelText: 'Cancel',
  finish: noop,
  finishText: 'Finish',
  saving: false,
  savingText: 'Saving'
});