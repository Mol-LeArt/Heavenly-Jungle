/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.TooltipTrigger = exports.Tooltip = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Tooltip = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Tooltip, _React$PureComponent);

  function Tooltip() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = Tooltip.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/tooltips/');
  };

  _proto.render = function render() {
    var _this$props = this.props,
        isSticky = _this$props.isSticky,
        visible = _this$props.visible,
        size = _this$props.size,
        className = _this$props.className,
        children = _this$props.children,
        others = _objectWithoutPropertiesLoose(_this$props, ["isSticky", "visible", "size", "className", "children"]);

    var newClasses = (0, _classnames["default"])('tooltip-container', visible ? 'tooltip-container-visible' : 'tooltip-container-hidden', size === 'auto' ? null : "tooltip-" + size, isSticky ? 'tooltip-hoverable' : null, className);
    return _react["default"].createElement("div", _extends({
      className: newClasses
    }, others), _react["default"].createElement("div", {
      className: "tooltip-content"
    }, children));
  };

  return Tooltip;
}(_react["default"].PureComponent);

exports.Tooltip = Tooltip;

_defineProperty(Tooltip, "propTypes", {
  visible: _propTypes["default"].bool,
  size: _propTypes["default"].oneOf(['auto', 'sm', 'md', 'lg']),
  isSticky: _propTypes["default"].bool
});

_defineProperty(Tooltip, "defaultProps", {
  visible: true,
  size: 'auto',
  isSticky: false
});

var TooltipTrigger = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TooltipTrigger, _React$Component);

  function TooltipTrigger(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      visible: false
    };
    _this.clickHandler = _this.clickHandler.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto2 = TooltipTrigger.prototype;

  _proto2.componentDidMount = function componentDidMount() {
    require('../../css/tooltips');

    this.mounted = true;
  };

  _proto2.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  _proto2.hoverHandler = function hoverHandler(e) {
    this.setState({
      visible: e.type === 'mouseenter'
    });
  };

  _proto2.focusHandler = function focusHandler(e) {
    this.setState({
      visible: e.type === 'focus'
    });
  };

  _proto2.clickHandler = function clickHandler(e, onClick) {
    var _this2 = this;

    this.setState({
      visible: true
    });
    onClick(e);
    setTimeout(function () {
      _this2.mounted && _this2.setState({
        visible: false
      });
    }, this.props.clickHideDelay);
  };

  _proto2.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (prevState.visible && !this.state.visible) {
      this.props.onExited();
    } else if (!prevState.visible && this.state.visible) {
      this.props.onEntered();
    }
  };

  _proto2.render = function render() {
    var _this3 = this;

    var _this$props2 = this.props,
        isSticky = _this$props2.isSticky,
        placement = _this$props2.placement,
        tooltip = _this$props2.tooltip,
        trigger = _this$props2.trigger,
        className = _this$props2.className,
        clickHideDelay = _this$props2.clickHideDelay,
        onEntered = _this$props2.onEntered,
        onExited = _this$props2.onExited,
        theme = _this$props2.theme,
        size = _this$props2.size,
        _onClick = _this$props2.onClick,
        display = _this$props2.display,
        disabled = _this$props2.disabled,
        others = _objectWithoutPropertiesLoose(_this$props2, ["isSticky", "placement", "tooltip", "trigger", "className", "clickHideDelay", "onEntered", "onExited", "theme", "size", "onClick", "display", "disabled"]);

    var visible = false;
    if (!disabled) visible = trigger === 'manual' ? display : this.state.visible;
    var placementClass;

    if (placement !== 'top') {
      placementClass = "tooltip-" + placement;
    }

    var triggerHandler;

    switch (trigger) {
      case 'click':
        triggerHandler = {
          onClick: function onClick(e) {
            return _this3.clickHandler(e, _onClick);
          }
        };
        break;

      case 'manual':
        triggerHandler = {};
        break;

      default:
        triggerHandler = {
          onClick: _onClick,
          onMouseEnter: this.hoverHandler.bind(this),
          onMouseLeave: this.hoverHandler.bind(this),
          onFocus: this.focusHandler.bind(this),
          onBlur: this.focusHandler.bind(this)
        };
        break;
    }

    var newClasses = (0, _classnames["default"])('tooltip', className, placementClass, theme === 'light' ? 'tooltip-light' : null);
    var newProps = Object.assign({
      className: newClasses,
      'tabIndex': '0'
    }, triggerHandler, others);
    return _react["default"].createElement("div", newProps, this.props.children, _react["default"].createElement(Tooltip, {
      isSticky: isSticky,
      size: this.props.size,
      visible: visible
    }, tooltip));
  };

  return TooltipTrigger;
}(_react["default"].Component);

exports.TooltipTrigger = TooltipTrigger;

_defineProperty(TooltipTrigger, "propTypes", {
  clickHideDelay: _propTypes["default"].number,
  disabled: _propTypes["default"].bool,
  display: _propTypes["default"].bool,
  isSticky: _propTypes["default"].bool,
  onClick: _propTypes["default"].func,
  onEntered: _propTypes["default"].func,
  onExited: _propTypes["default"].func,
  placement: _propTypes["default"].oneOf(['left', 'right', 'bottom', 'top']),
  size: _propTypes["default"].oneOf(['auto', 'sm', 'md', 'lg']),
  theme: _propTypes["default"].oneOf(['dark', 'light']),
  tooltip: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].object]).isRequired,
  trigger: _propTypes["default"].oneOf(['manual', 'click', 'hover focus'])
});

_defineProperty(TooltipTrigger, "defaultProps", {
  clickHideDelay: 1000,
  disabled: false,
  display: false,
  isSticky: false,
  onClick: function onClick() {},
  onEntered: function onEntered() {},
  onExited: function onExited() {},
  placement: 'top',
  size: 'auto',
  theme: 'dark',
  trigger: 'hover focus'
});