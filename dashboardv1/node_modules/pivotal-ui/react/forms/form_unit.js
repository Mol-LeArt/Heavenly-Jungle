/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.FormUnit = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tooltip = require("../tooltip");

var _iconography = require("../iconography");

var _flexGrids = require("../flex-grids");

var _classnames2 = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FormUnit = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(FormUnit, _React$Component);

  function FormUnit() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "newTooltipIcon", function () {
      var _this$props = _this.props,
          tooltip = _this$props.tooltip,
          tooltipSize = _this$props.tooltipSize,
          tooltipPlacement = _this$props.tooltipPlacement;
      return tooltip && _react["default"].createElement(_tooltip.TooltipTrigger, {
        tooltip: tooltip,
        className: 'tooltip-light',
        size: tooltipSize,
        placement: tooltipPlacement
      }, _react["default"].createElement(_iconography.Icon, {
        verticalAlign: "baseline",
        src: "info_outline"
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "newLabelElement", function (tooltipIcon) {
      var _this$props2 = _this.props,
          labelClassName = _this$props2.labelClassName,
          labelFor = _this$props2.labelFor,
          label = _this$props2.label,
          optional = _this$props2.optional,
          optionalText = _this$props2.optionalText;
      return _react["default"].createElement("label", {
        className: labelClassName,
        htmlFor: labelFor
      }, label, tooltipIcon, label && optional && _react["default"].createElement("span", {
        className: "optional-text type-gray"
      }, optionalText || optionalText === '' ? optionalText : '(Optional)'));
    });

    _defineProperty(_assertThisInitialized(_this), "newLabelRow", function () {
      var _this$props3 = _this.props,
          label = _this$props3.label,
          retainLabelHeight = _this$props3.retainLabelHeight,
          postLabel = _this$props3.postLabel,
          inline = _this$props3.inline,
          labelRowClassName = _this$props3.labelRowClassName,
          state = _this$props3.state,
          setValues = _this$props3.setValues;

      var tooltipIcon = _this.newTooltipIcon();

      var labelElement = _this.newLabelElement(tooltipIcon);

      return (label || retainLabelHeight || postLabel) && (inline ? labelElement : _react["default"].createElement(_flexGrids.Grid, {
        key: 'label-row',
        className: (0, _classnames2["default"])('label-row', labelRowClassName),
        gutter: false
      }, _react["default"].createElement(_flexGrids.FlexCol, null, labelElement), _react["default"].createElement(_flexGrids.FlexCol, {
        fixed: true,
        contentAlignment: "middle",
        className: "post-label"
      }, typeof postLabel === 'function' ? postLabel({
        state: state,
        setValues: setValues
      }) : postLabel)));
    });

    _defineProperty(_assertThisInitialized(_this), "newFieldRow", function () {
      var _this$props4 = _this.props,
          children = _this$props4.children,
          inline = _this$props4.inline,
          fieldRowClassName = _this$props4.fieldRowClassName;
      return children && (inline ? children : _react["default"].createElement("div", {
        className: (0, _classnames2["default"])('field-row', fieldRowClassName),
        key: "field-row"
      }, children));
    });

    _defineProperty(_assertThisInitialized(_this), "newContent", function (labelRow, fieldRow, helpRow) {
      var _this$props5 = _this.props,
          inline = _this$props5.inline,
          labelRowClassName = _this$props5.labelRowClassName,
          labelPosition = _this$props5.labelPosition,
          fieldRowClassName = _this$props5.fieldRowClassName,
          hideHelpRow = _this$props5.hideHelpRow;
      var sections = labelPosition === 'after' ? [fieldRow, labelRow] : [labelRow, fieldRow];

      var showRowClassNames = function showRowClassNames(key, position) {
        return key === position && labelPosition !== 'after' || key === 1 - position && labelPosition === 'after';
      };

      var content = inline ? [_react["default"].createElement(_flexGrids.Grid, {
        className: "grid-inline",
        key: "top"
      }, sections.map(function (col, key) {
        var _classnames;

        return _react["default"].createElement(_flexGrids.FlexCol, {
          key: key,
          fixed: key === 0,
          className: (0, _classnames2["default"])((_classnames = {}, _classnames[(0, _classnames2["default"])('label-row', labelRowClassName)] = showRowClassNames(key, 0), _classnames[(0, _classnames2["default"])('field-row', fieldRowClassName)] = showRowClassNames(key, 1), _classnames))
        }, col);
      }))] : sections;
      !hideHelpRow && content.push(helpRow);
      return content;
    });

    _defineProperty(_assertThisInitialized(_this), "newHelpRow", function () {
      var _this$props6 = _this.props,
          inline = _this$props6.inline,
          hasError = _this$props6.hasError,
          help = _this$props6.help;
      var helpRowClassName = (0, _classnames2["default"])('help-row', {
        'type-gray': !hasError
      });

      if (inline) {
        return _react["default"].createElement(_flexGrids.Grid, {
          key: "bottom"
        }, _react["default"].createElement(_flexGrids.FlexCol, {
          className: helpRowClassName
        }, help));
      }

      return _react["default"].createElement("div", {
        className: helpRowClassName,
        key: "help-row"
      }, help);
    });

    return _this;
  }

  var _proto = FormUnit.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/forms');
  };

  _proto.render = function render() {
    var _this$props7 = this.props,
        className = _this$props7.className,
        inline = _this$props7.inline,
        label = _this$props7.label,
        children = _this$props7.children,
        help = _this$props7.help,
        hasError = _this$props7.hasError;
    if (!label && !children && !help) return null;
    var labelRow = this.newLabelRow();
    var fieldRow = this.newFieldRow();
    var helpRow = this.newHelpRow();
    return _react["default"].createElement("div", {
      className: (0, _classnames2["default"])('form-unit', className, {
        'has-error': hasError,
        'inline-form-unit': inline
      })
    }, this.newContent(labelRow, fieldRow, helpRow));
  };

  return FormUnit;
}(_react["default"].Component);

exports.FormUnit = FormUnit;

_defineProperty(FormUnit, "propTypes", {
  children: _propTypes["default"].node,
  className: _propTypes["default"].string,
  fieldRowClassName: _propTypes["default"].string,
  hasError: _propTypes["default"].bool,
  help: _propTypes["default"].node,
  hideHelpRow: _propTypes["default"].bool,
  inline: _propTypes["default"].bool,
  label: _propTypes["default"].string,
  labelClassName: _propTypes["default"].string,
  labelFor: _propTypes["default"].string,
  labelPosition: _propTypes["default"].oneOf(['after']),
  labelRowClassName: _propTypes["default"].string,
  optional: _propTypes["default"].bool,
  optionalText: _propTypes["default"].string,
  postLabel: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]),
  retainLabelHeight: _propTypes["default"].bool,
  setValues: _propTypes["default"].func,
  state: _propTypes["default"].object,
  tooltip: _propTypes["default"].node,
  tooltipPlacement: _propTypes["default"].oneOf(['left', 'right', 'bottom', 'top']),
  tooltipSize: _propTypes["default"].oneOf(['sm', 'md', 'lg'])
});

_defineProperty(FormUnit, "defaultProps", {
  tooltipSize: 'lg',
  tooltipPlacement: 'top'
});