/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.Form = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _deepEqual = _interopRequireDefault(require("deep-equal"));

var _lodash = _interopRequireDefault(require("lodash.clonedeep"));

var _form_unit = require("./form_unit");

var _helpers = require("../helpers");

var _inputs = require("../inputs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var isOptional = function isOptional(_ref, current) {
  var optional = _ref.optional;
  return typeof optional === 'function' ? optional({
    current: current
  }) : optional;
};

var isPromise = function isPromise(promise) {
  return promise && typeof promise.then === 'function';
};

var newId = function newId() {
  return "pui-form-" + Math.round(Math.random() * Number.MAX_SAFE_INTEGER);
};

var noop = function noop() {
  return undefined;
};

var newFormState = function newFormState(fields, ids, cb) {
  var state = {
    initial: {},
    current: {},
    ids: ids,
    submitting: false,
    errors: {}
  };

  for (var name in fields) {
    var props = fields[name];
    if (!props) continue;

    var _cb = cb(_extends({}, props, {
      name: name
    })),
        initialValue = _cb.initialValue,
        currentValue = _cb.currentValue;

    state.initial[name] = initialValue;
    state.current[name] = currentValue;
    state.ids[name] = ids[name] || newId();
  }

  return state;
};

var newInitialValue = function newInitialValue(initialValue) {
  return initialValue === null || initialValue === undefined ? '' : initialValue;
};

var Form = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Form, _React$Component);

  function Form(_props) {
    var _this;

    _this = _React$Component.call(this, _props) || this;

    _defineProperty(_assertThisInitialized(_this), "onChangeCheckbox", function (name, cb) {
      return function (val) {
        var _extends2, _nextValue;

        var _this$state = _this.state,
            initial = _this$state.initial,
            current = _this$state.current;
        var value = !_this.state.current[name];
        var nextState = {
          current: _extends({}, current, (_extends2 = {}, _extends2[name] = value, _extends2))
        };
        if (typeof val.persist === 'function') val.persist();
        var nextValue = (_nextValue = {}, _nextValue[name] = value, _nextValue);
        if (cb) _this.setValues(nextValue, function () {
          return cb(val);
        });else _this.setValues(nextValue);
        if (_this.props.onModified) _this.props.onModified(!(0, _deepEqual["default"])(initial, nextState.current));
      };
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (name, validator, cb) {
      return function (val) {
        var _extends3;

        var initial = _this.state.initial;
        var value = val.target && 'value' in val.target ? val.target.value : val;
        var nextState = {
          current: _extends({}, _this.state.current, (_extends3 = {}, _extends3[name] = value, _extends3))
        };
        var error = validator && validator(value);

        if (!error) {
          nextState.errors = _extends({}, _this.state.errors);
          delete nextState.errors[name];
        }

        if (typeof val.persist === 'function') val.persist();
        if (cb) _this.setState(nextState, function () {
          return cb(val);
        });else _this.setState(nextState);
        if (_this.props.onModified) _this.props.onModified(!(0, _deepEqual["default"])(initial, nextState.current));
      };
    });

    _defineProperty(_assertThisInitialized(_this), "onBlur", function (_ref2) {
      var name = _ref2.name,
          validator = _ref2.validator;
      return function (_ref3) {
        var _extends4;

        var value = _ref3.target.value;
        var error = validator(value);

        _this.setState({
          errors: _extends({}, _this.state.errors, (_extends4 = {}, _extends4[name] = error, _extends4))
        });
      };
    });

    _defineProperty(_assertThisInitialized(_this), "canReset", function () {
      return !_this.state.submitting && !(0, _deepEqual["default"])(_this.state.initial, _this.state.current);
    });

    _defineProperty(_assertThisInitialized(_this), "reset", function () {
      var initial = _this.state.initial;
      if (_this.props.onModified) _this.props.onModified(false);

      _this.setState({
        current: (0, _lodash["default"])(initial),
        errors: {}
      });
    });

    _defineProperty(_assertThisInitialized(_this), "canSubmit", function (_temp) {
      var _ref4 = _temp === void 0 ? {} : _temp,
          checkRequiredFields = _ref4.checkRequiredFields;

      var fields = _this.props.fields;
      var _this$state2 = _this.state,
          initial = _this$state2.initial,
          current = _this$state2.current,
          submitting = _this$state2.submitting;
      var isDiffFromInitial = (0, _helpers.find)(Object.keys(initial), function (key) {
        return !(0, _deepEqual["default"])(initial[key], current[key]);
      });
      var requiredFields = Object.keys(fields).filter(function (name) {
        return fields[name] && !isOptional(fields[name], current);
      });
      var requiredFieldsHaveValue = requiredFields.every(function (name) {
        return current[name] || current[name] === 0;
      });
      var passesValidators = true;

      for (var name in fields) {
        var props = fields[name];
        if (!props) continue;

        if (props.validator && props.validator(current[name])) {
          passesValidators = false;
          break;
        }
      }

      return !submitting && isDiffFromInitial && (checkRequiredFields ? checkRequiredFields(current) : requiredFieldsHaveValue) && passesValidators;
    });

    _defineProperty(_assertThisInitialized(_this), "onSubmit", function (e) {
      e && e.preventDefault();
      var _this$props = _this.props,
          onSubmit = _this$props.onSubmit,
          onSubmitError = _this$props.onSubmitError,
          afterSubmit = _this$props.afterSubmit,
          onModified = _this$props.onModified,
          resetOnSubmit = _this$props.resetOnSubmit;
      var _this$state3 = _this.state,
          initial = _this$state3.initial,
          current = _this$state3.current;

      _this.setState({
        submitting: true
      });

      var nextState = {
        submitting: false
      };

      var onSuccess = function onSuccess(response) {
        _this.setState(_extends({}, nextState, {
          current: resetOnSubmit ? (0, _lodash["default"])(initial) : current,
          initial: resetOnSubmit ? initial : (0, _lodash["default"])(current),
          errors: {}
        }));

        var after = function after() {
          return afterSubmit({
            state: _this.state,
            response: response,
            reset: _this.reset
          });
        };

        var onModifiedPromise = onModified && onModified(false);
        return isPromise(onModifiedPromise) ? onModifiedPromise.then(after) : after();
      };

      var onError = function onError(e) {
        _this.setState(_extends({}, nextState, {
          errors: onSubmitError && onSubmitError(e) || {}
        }));
      };

      try {
        var afterSubmitPromise = onSubmit({
          initial: initial,
          current: current
        });

        if (isPromise(afterSubmitPromise)) {
          return afterSubmitPromise.then(onSuccess)["catch"](onError);
        } else {
          return onSuccess(afterSubmitPromise);
        }
      } catch (e) {
        onError(e);
        throw e;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "setValues", function (values, cb) {
      return _this.setState({
        current: _extends({}, _this.state.current, values)
      }, cb);
    });

    _defineProperty(_assertThisInitialized(_this), "setErrors", function (errors, cb) {
      return _this.setState({
        errors: _extends({}, _this.state.errors, errors)
      }, cb);
    });

    _defineProperty(_assertThisInitialized(_this), "controlField", function (_ref5) {
      var _ref5$children = _ref5.children,
          children = _ref5$children === void 0 ? _react["default"].createElement(_inputs.Input, {
        type: "text"
      }) : _ref5$children,
          validator = _ref5.validator,
          name = _ref5.name,
          ids = _ref5.ids;

      var _assertThisInitialize = _assertThisInitialized(_this),
          canSubmit = _assertThisInitialize.canSubmit,
          canReset = _assertThisInitialize.canReset,
          reset = _assertThisInitialize.reset,
          onSubmit = _assertThisInitialize.onSubmit,
          setErrors = _assertThisInitialize.setErrors,
          setValues = _assertThisInitialize.setValues,
          state = _assertThisInitialize.state,
          onChange = _assertThisInitialize.onChange,
          onBlur = _assertThisInitialize.onBlur,
          onChangeCheckbox = _assertThisInitialize.onChangeCheckbox;

      var submitting = state.submitting;
      var element = typeof children !== 'function' ? children : children({
        onChange: onChange(name, validator),
        canSubmit: canSubmit,
        canReset: canReset,
        reset: reset,
        onSubmit: onSubmit,
        submitting: submitting,
        setValues: setValues,
        setErrors: setErrors,
        state: state
      });
      if (!element || _react["default"].Children.count(element) !== 1 || !name) return element;
      var props = {
        name: element.props.name || name
      };
      props.id = element.props.id || ids[props.name];
      var hasCurrentValue = state.current.hasOwnProperty(name);

      if (element.props.type === 'checkbox') {
        props.checked = !!(hasCurrentValue ? state.current && state.current[name] : element.props.checked);
        props.onChange = onChangeCheckbox(name, element.props.onChange);
      } else {
        props.value = hasCurrentValue ? state.current && state.current[name] : element.props.value;
        props.onChange = onChange(name, validator, element.props.onChange);
        if (validator) props.onBlur = onBlur({
          name: name,
          validator: validator
        });
      }

      return _react["default"].cloneElement(element, props);
    });

    _this.state = newFormState(_props.fields, {}, function (_ref6) {
      var initialValue = _ref6.initialValue;
      initialValue = newInitialValue(initialValue);
      return {
        initialValue: initialValue,
        currentValue: (0, _lodash["default"])(initialValue)
      };
    });
    return _this;
  }

  var _proto = Form.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/forms');
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(_ref7, nextState) {
    var _this2 = this;

    var fields = _ref7.fields;
    var isStateChange = nextState !== this.state;
    var current = nextState.current,
        initial = nextState.initial;

    var _newFormState = newFormState(fields, nextState.ids, function (_ref8) {
      var name = _ref8.name,
          initialValue = _ref8.initialValue;
      initialValue = newInitialValue(initialValue);
      return {
        initialValue: initialValue,
        currentValue: current.hasOwnProperty(name) ? current[name] === _this2.state.initial[name] ? (0, _lodash["default"])(initialValue) : current[name] : (0, _lodash["default"])(initialValue)
      };
    }),
        newInitial = _newFormState.initial,
        ids = _newFormState.ids,
        newCurrent = _newFormState.current;

    nextState.initial = isStateChange ? initial : newInitial;
    nextState.current = newCurrent;
    nextState.ids = ids;
    return true;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onModified) this.props.onModified(false);
  };

  _proto.render = function render() {
    // eslint-disable-next-line no-unused-vars
    var _this$props2 = this.props,
        className = _this$props2.className,
        children = _this$props2.children,
        fields = _this$props2.fields,
        onModified = _this$props2.onModified,
        onSubmitError = _this$props2.onSubmitError,
        afterSubmit = _this$props2.afterSubmit,
        resetOnSubmit = _this$props2.resetOnSubmit,
        others = _objectWithoutPropertiesLoose(_this$props2, ["className", "children", "fields", "onModified", "onSubmitError", "afterSubmit", "resetOnSubmit"]);

    var canSubmit = this.canSubmit,
        canReset = this.canReset,
        reset = this.reset,
        onSubmit = this.onSubmit,
        setValues = this.setValues,
        setErrors = this.setErrors,
        state = this.state,
        onBlur = this.onBlur;
    var current = state.current,
        submitting = state.submitting,
        ids = state.ids;
    var formUnits = {};

    for (var name in fields) {
      var props = fields[name];
      if (!props) continue;
      var error = state.errors[name];

      var _children = this.controlField(_extends({}, props, {
        name: name,
        ids: ids
      }));

      var help = error || props.help;
      var labelFor = props.labelFor || _children.props.id; // eslint-disable-next-line no-unused-vars

      var _ = props.className,
          rest = _objectWithoutPropertiesLoose(props, ["className"]);

      formUnits[name] = _react["default"].createElement(_form_unit.FormUnit, _extends({}, rest, {
        key: name,
        optional: isOptional(rest, current),
        setValues: setValues,
        setErrors: setErrors,
        state: state,
        name: name,
        hasError: !!error,
        help: help,
        labelFor: labelFor,
        children: _children
      }));
    }

    return _react["default"].createElement("form", _extends({}, others, {
      className: (0, _classnames["default"])('form', className),
      onSubmit: this.onSubmit
    }), _react["default"].createElement("fieldset", {
      disabled: submitting
    }, children({
      fields: formUnits,
      canSubmit: canSubmit,
      canReset: canReset,
      reset: reset,
      onSubmit: onSubmit,
      setValues: setValues,
      setErrors: setErrors,
      state: state,
      onBlur: onBlur,
      submitting: submitting
    })));
  };

  return Form;
}(_react["default"].Component);

exports.Form = Form;

_defineProperty(Form, "propTypes", {
  afterSubmit: _propTypes["default"].func,
  fields: _propTypes["default"].object,
  onModified: _propTypes["default"].func,
  onSubmit: _propTypes["default"].func,
  onSubmitError: _propTypes["default"].func,
  resetOnSubmit: _propTypes["default"].bool
});

_defineProperty(Form, "defaultProps", {
  children: noop,
  fields: {},
  onSubmit: noop,
  onSubmitError: function onSubmitError() {
    return {};
  },
  afterSubmit: noop
});