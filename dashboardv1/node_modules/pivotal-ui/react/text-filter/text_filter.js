/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.TextFilter = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _flexGrids = require("../flex-grids");

var _iconography = require("../iconography");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TextFilter = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TextFilter, _React$Component);

  function TextFilter(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      filterText: ''
    };
    _this.onFilterTextChange = _this.onFilterTextChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = TextFilter.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/text-filter');
  };

  _proto.onFilterTextChange = function onFilterTextChange(_ref) {
    var value = _ref.target.value;
    this.setState({
      filterText: value
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        data = _this$props.data,
        filter = _this$props.filter,
        renderFilteredData = _this$props.renderFilteredData,
        className = _this$props.className,
        filterPlaceholderText = _this$props.filterPlaceholderText,
        emptyState = _this$props.emptyState;
    var filterText = this.state.filterText;
    var filteredData = filter(data, filterText);
    var renderBlock = renderFilteredData(filteredData);

    if (filteredData.length === 0 && !!emptyState) {
      renderBlock = emptyState;
    }

    return _react["default"].createElement("div", {
      className: "text-filter"
    }, _react["default"].createElement(_flexGrids.Grid, {
      className: className
    }, _react["default"].createElement(_flexGrids.FlexCol, {
      className: "pan",
      fixed: true,
      contentAlignment: "middle"
    }, _react["default"].createElement(_iconography.Icon, {
      src: "filter_list"
    })), _react["default"].createElement(_flexGrids.FlexCol, {
      className: "pan"
    }, _react["default"].createElement("input", {
      placeholder: filterPlaceholderText,
      type: "text",
      value: filterText,
      onChange: this.onFilterTextChange
    })), _react["default"].createElement(_flexGrids.FlexCol, {
      className: "pan text-filter-counts",
      fixed: true,
      alignment: "middle"
    }, _react["default"].createElement("span", {
      className: "filtered-count"
    }, filteredData.length), " / ", _react["default"].createElement("span", {
      className: "unfiltered-count"
    }, data.length))), renderBlock);
  };

  return TextFilter;
}(_react["default"].Component);

exports.TextFilter = TextFilter;

_defineProperty(TextFilter, "propTypes", {
  data: _propTypes["default"].array.isRequired,
  emptyState: _propTypes["default"].node,
  filter: _propTypes["default"].func.isRequired,
  filterPlaceholderText: _propTypes["default"].string,
  renderFilteredData: _propTypes["default"].func.isRequired
});

_defineProperty(TextFilter, "defaultProps", {
  data: [],
  filter: function filter(data) {
    return data;
  },
  renderFilteredData: function renderFilteredData() {
    return null;
  },
  filterPlaceholderText: 'Filter...'
});