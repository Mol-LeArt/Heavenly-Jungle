/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.Autocomplete = void 0;

var _autocomplete_list = require("./autocomplete_list");

var _autocomplete_input = require("./autocomplete_input");

var _classnames = _interopRequireDefault(require("classnames"));

var _from = _interopRequireDefault(require("from"));

var _mixins = _interopRequireDefault(require("../mixins"));

var _react = _interopRequireDefault(require("react"));

var _scrollIntoView = _interopRequireDefault(require("scroll-into-view"));

var _scrim_mixin = _interopRequireDefault(require("../mixins/mixins/scrim_mixin"));

var _through = _interopRequireDefault(require("through"));

var _trieSearch = _interopRequireDefault(require("trie-search"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var trieFromSearchableItems = function trieFromSearchableItems(searchableItems, trieOptions) {
  return new Promise(function (resolve) {
    var trie;
    (0, _from["default"])(function (count, callback) {
      if (searchableItems && count >= searchableItems.length) this.emit('end');
      this.emit('data', searchableItems[count]);
      callback();
    }).pipe((0, _through["default"])(function (value) {
      if (typeof value === 'object') {
        if (!trie) trie = new _trieSearch["default"](null, trieOptions);
        trie.addFromObject(value);
        resolve(trie);
        return;
      }

      if (!trie) trie = new _trieSearch["default"]('value', trieOptions);
      trie.add({
        value: value
      });
      resolve(trie);
    }));
  });
};

var Autocomplete = /*#__PURE__*/function (_mixin$with) {
  _inheritsLoose(Autocomplete, _mixin$with);

  function Autocomplete(props, context) {
    var _this;

    _this = _mixin$with.call(this, props, context) || this;

    _defineProperty(_assertThisInitialized(_this), "searchItemsInOrder", function () {
      var searchableItems = _this.state.searchableItems;
      if (searchableItems.every(function (item) {
        return typeof item === 'string';
      })) return searchableItems.map(function (value) {
        return {
          value: value
        };
      });
      return searchableItems.map(function (item) {
        var key = Object.keys(item)[0];
        return {
          _key_: key,
          value: item[key]
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onSearch", function (value, callback) {
      if (_this.props.onSearch) return _this.props.onSearch(value, callback);
      var maxItems = _this.props.maxItems;
      var trie = _this.state.trie;
      if (!trie) return callback([]);
      value = value.trim();
      var result = value ? trie.get(value) : _this.searchItemsInOrder();

      if (_this.props.onFilter) {
        result = _this.props.onFilter(result);
      }

      callback(result.slice(0, maxItems));
    });

    _defineProperty(_assertThisInitialized(_this), "updateList", function (defaultValue) {
      if (defaultValue === void 0) {
        defaultValue = null;
      }

      var value = defaultValue === null ? _this.state.value : defaultValue;

      _this.onSearch(value, function (suggestedValues) {
        _this.setState({
          suggestedValues: suggestedValues
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "showList", function (defaultValue) {
      if (defaultValue === void 0) {
        defaultValue = null;
      }

      var value = defaultValue === null ? _this.state.value : defaultValue;

      _this.onSearch(value, function (suggestedValues) {
        _this.setState({
          hidden: false,
          suggestedValues: suggestedValues
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onPick", function (value) {
      _this.props.onPick && _this.props.onPick(value);

      _this.hideList();
    });

    _defineProperty(_assertThisInitialized(_this), "scrollIntoViewFn", function () {
      if (!_this.autocomplete) return;
      Array.from(_this.autocomplete.querySelectorAll('.highlighted')).map(function (el) {
        return (0, _scrollIntoView["default"])(el, {
          validTarget: function validTarget(target) {
            return target !== window;
          }
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hideList", function () {
      return _this.setState({
        hidden: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "scrimClick", function () {
      return _this.hideList();
    });

    var _value = _this.props.value || '';

    _this.state = {
      hidden: true,
      highlightedSuggestion: 0,
      suggestedValues: [],
      trie: null,
      value: _value
    };
    return _this;
  }

  var _proto = Autocomplete.prototype;

  _proto.componentWillUnmount = function componentWillUnmount() {
    _mixin$with.prototype.componentWillUnmount.call(this);

    this.mounted = false;
  };

  _proto.componentDidMount = function componentDidMount() {
    var _this2 = this;

    _mixin$with.prototype.componentDidMount.call(this);

    this.mounted = true;

    require('../../css/autocomplete');

    this.props.onInitializeItems(function (searchableItems) {
      if (searchableItems === void 0) {
        searchableItems = [];
      }

      return trieFromSearchableItems(searchableItems, _this2.props.trieOptions).then(function (trie) {
        if (_this2.mounted) _this2.setState({
          searchableItems: searchableItems,
          trie: trie
        });
      });
    });
  };

  _proto.getValue = function getValue() {
    return this.props.value === undefined ? this.state.value : this.props.value;
  };

  _proto.render = function render() {
    var _this3 = this;

    var _this$props = this.props,
        className = _this$props.className,
        maxItems = _this$props.maxItems,
        onFocus = _this$props.onFocus,
        onClick = _this$props.onClick,
        disabled = _this$props.disabled,
        selectedSuggestion = _this$props.selectedSuggestion,
        placeholder = _this$props.placeholder,
        input = _this$props.input,
        children = _this$props.children,
        __IGNORE1 = _this$props.onInitializeItems,
        __IGNORE2 = _this$props.onFilter,
        __IGNORE3 = _this$props.onPick,
        __IGNORE4 = _this$props.onSearch,
        __IGNORE5 = _this$props.trieOptions,
        showNoSearchResults = _this$props.showNoSearchResults,
        props = _objectWithoutPropertiesLoose(_this$props, ["className", "maxItems", "onFocus", "onClick", "disabled", "selectedSuggestion", "placeholder", "input", "children", "onInitializeItems", "onFilter", "onPick", "onSearch", "trieOptions", "showNoSearchResults"]);

    var _this$state = this.state,
        highlightedSuggestion = _this$state.highlightedSuggestion,
        suggestedValues = _this$state.suggestedValues,
        hidden = _this$state.hidden;
    var scrollIntoViewFn = this.scrollIntoViewFn,
        onPick = this.onPick,
        onSearch = this.onSearch;

    var clonedInput = _react["default"].cloneElement(input, {
      highlightedSuggestion: highlightedSuggestion,
      suggestedValues: suggestedValues,
      value: this.getValue(),
      setState: function setState(state) {
        return _this3.setState(state);
      },
      onPick: onPick,
      scrollIntoView: scrollIntoViewFn,
      onSearch: onSearch,
      disabled: disabled,
      onFocus: onFocus,
      onClick: onClick,
      placeholder: placeholder
    });

    return _react["default"].createElement("div", _extends({
      className: (0, _classnames["default"])('autocomplete', className),
      ref: function ref(_ref) {
        return _this3.autocomplete = _ref;
      }
    }, props), clonedInput, _react["default"].createElement(_autocomplete_list.AutocompleteList, {
      highlightedSuggestion: highlightedSuggestion,
      suggestedValues: suggestedValues,
      hidden: hidden,
      value: this.getValue(),
      onPick: onPick,
      maxItems: maxItems,
      selectedSuggestion: selectedSuggestion,
      showNoSearchResults: showNoSearchResults
    }, children));
  };

  return Autocomplete;
}((0, _mixins["default"])(_react["default"].Component)["with"](_scrim_mixin["default"]));

exports.Autocomplete = Autocomplete;

_defineProperty(Autocomplete, "propTypes", {
  className: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  input: _propTypes["default"].object,
  maxItems: _propTypes["default"].number,
  onClick: _propTypes["default"].func,
  onFilter: _propTypes["default"].func,
  onFocus: _propTypes["default"].func,
  onInitializeItems: _propTypes["default"].func,
  onPick: _propTypes["default"].func,
  onSearch: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  selectedSuggestion: _propTypes["default"].any,
  trieOptions: _propTypes["default"].object,
  value: _propTypes["default"].string,
  showNoSearchResults: _propTypes["default"].bool
});

_defineProperty(Autocomplete, "defaultProps", {
  maxItems: 50,
  onInitializeItems: function onInitializeItems(done) {
    return done([]);
  },
  input: _react["default"].createElement(_autocomplete_input.AutocompleteInput, null),
  placeholder: 'Search',
  showNoSearchResults: false
});