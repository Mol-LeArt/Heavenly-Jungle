/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.AutocompleteList = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var AutocompleteList = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(AutocompleteList, _React$Component);

  function AutocompleteList(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = AutocompleteList.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/autocomplete');
  };

  _proto.onClick = function onClick(value, e) {
    e.preventDefault();
    this.props.onPick(value);
  };

  _proto.renderSuggestionList = function renderSuggestionList() {
    var _this2 = this;

    var _this$props = this.props,
        className = _this$props.className,
        showNoSearchResults = _this$props.showNoSearchResults,
        suggestedValues = _this$props.suggestedValues,
        highlightedSuggestion = _this$props.highlightedSuggestion;
    var suggestions = suggestedValues.map(function (suggestion, key) {
      var value = '_key_' in suggestion ? suggestion._key_ : suggestion.value;
      var className = (0, _classnames["default"])('autocomplete-item', {
        highlighted: key === highlightedSuggestion,
        selected: value === _this2.props.selectedSuggestion
      });
      return _react["default"].createElement("li", {
        key: key
      }, _react["default"].createElement("a", {
        href: "#",
        onClick: _this2.onClick.bind(_this2, suggestion),
        role: "button",
        title: value,
        className: className
      }, value));
    });

    if (!suggestions.length) {
      return showNoSearchResults ? _react["default"].createElement("div", null, _react["default"].createElement("ul", null, _react["default"].createElement("li", {
        className: "autocomplete-list autocomplete-item autocomplete-item-no-results"
      }, "No search results"))) : null;
    }

    return _react["default"].createElement("ul", {
      className: (0, _classnames["default"])('autocomplete-list', className)
    }, suggestions);
  };

  _proto.renderDefault = function renderDefault() {
    var _this$props2 = this.props,
        hidden = _this$props2.hidden,
        value = _this$props2.value,
        minSearchTerm = _this$props2.minSearchTerm;
    if (hidden || value.length < minSearchTerm) return null;
    return this.renderSuggestionList();
  };

  _proto.render = function render() {
    var _this3 = this;

    var _this$props3 = this.props,
        children = _this$props3.children,
        hidden = _this$props3.hidden,
        value = _this$props3.value,
        highlightedSuggestion = _this$props3.highlightedSuggestion,
        suggestedValues = _this$props3.suggestedValues,
        props = _objectWithoutPropertiesLoose(_this$props3, ["children", "hidden", "value", "highlightedSuggestion", "suggestedValues"]);

    if (!children) return this.renderDefault();
    if (hidden) return null;
    children = _react["default"].Children.map(children, function (e) {
      return _react["default"].cloneElement(e, _extends({
        value: value,
        suggestedValues: suggestedValues,
        highlightedSuggestion: highlightedSuggestion,
        onClick: _this3.onClick
      }, props));
    });
    return _react["default"].createElement("div", null, children);
  };

  return AutocompleteList;
}(_react["default"].Component);

exports.AutocompleteList = AutocompleteList;

_defineProperty(AutocompleteList, "propTypes", {
  children: function children(props, name) {
    if (props[name] && props[name].length) return new Error('AutocompleteList can only wrap one element');
  },
  className: _propTypes["default"].string,
  hidden: _propTypes["default"].bool,
  highlightedSuggestion: _propTypes["default"].any,
  minSearchTerm: _propTypes["default"].number,
  onPick: _propTypes["default"].func,
  selectedSuggestion: _propTypes["default"].any,
  showNoSearchResults: _propTypes["default"].bool,
  suggestedValues: _propTypes["default"].array,
  value: _propTypes["default"].string
});

_defineProperty(AutocompleteList, "defaultProps", {
  minSearchTerm: 0
});