/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.CopyToClipboard = void 0;

var _react = _interopRequireDefault(require("react"));

var _clipboard_helper = _interopRequireDefault(require("./clipboard_helper"));

var _helpers = require("../helpers");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tooltip = require("../tooltip");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CopyToClipboard = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(CopyToClipboard, _React$PureComponent);

  function CopyToClipboard() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "click", function (_ref, e) {
      var onClick = _ref.onClick,
          text = _ref.text;

      _clipboard_helper["default"].copy(document, text);

      if (onClick) onClick(e);
    });

    return _this;
  }

  var _proto = CopyToClipboard.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/copy-to-clipboard');
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        text = _this$props.text,
        onClick = _this$props.onClick,
        _this$props$tooltip = _this$props.tooltip,
        tooltip = _this$props$tooltip === void 0 ? 'Copied' : _this$props$tooltip,
        tooltipPlacement = _this$props.tooltipPlacement,
        others = _objectWithoutPropertiesLoose(_this$props, ["children", "text", "onClick", "tooltip", "tooltipPlacement"]);

    var anchorProps = (0, _helpers.mergeProps)(others, {
      className: 'pui-copy-to-clipboard',
      onClick: this.click.bind(null, this.props),
      role: 'button'
    });
    return _react["default"].createElement("a", anchorProps, _react["default"].createElement(_tooltip.TooltipTrigger, {
      tooltip: tooltip,
      placement: tooltipPlacement,
      trigger: 'click'
    }, children));
  };

  return CopyToClipboard;
}(_react["default"].PureComponent);

exports.CopyToClipboard = CopyToClipboard;

_defineProperty(CopyToClipboard, "propTypes", {
  text: _propTypes["default"].string.isRequired,
  onClick: _propTypes["default"].func,
  tooltip: _propTypes["default"].string,
  tooltipPlacement: _propTypes["default"].oneOf(['left', 'right', 'bottom', 'top'])
});