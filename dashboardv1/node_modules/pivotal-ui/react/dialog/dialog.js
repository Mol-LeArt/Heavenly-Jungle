/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.Dialog = void 0;

var _react = _interopRequireDefault(require("react"));

var _dom_helpers = _interopRequireDefault(require("../helpers/dom_helpers"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Dialog = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Dialog, _React$PureComponent);

  function Dialog() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      visible: false
    });

    _defineProperty(_assertThisInitialized(_this), "hide", function () {
      return _this.props.onHide();
    });

    _defineProperty(_assertThisInitialized(_this), "setParentZIndex", function (zIndex) {
      if (!_this.props.updateParentZIndex || !_this.el.parentNode) return;
      _this.el.parentNode.style.zIndex = "" + zIndex;
    });

    _defineProperty(_assertThisInitialized(_this), "closeDialog", function () {
      _this.setState({
        visible: false
      }, function () {
        return _this.setParentZIndex(-1000);
      });

      _this.setBodyScrolling(true);
    });

    _defineProperty(_assertThisInitialized(_this), "openDialog", function () {
      _this.setBodyScrolling(false);

      _this.setState({
        visible: true
      }, function () {
        var tabbableEls = _dom_helpers["default"].findTabbableElements(_this.dialog) || [];
        tabbableEls[0] && tabbableEls[0].focus();

        _this.setParentZIndex(1000);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setBodyScrolling", function (canScroll) {
      if (canScroll) {
        return _dom_helpers["default"].enableBodyScrolling({
          overflow: _this.savedOverflow,
          document: global.document
        });
      }

      _this.savedOverflow = _dom_helpers["default"].disableBodyScrolling(global.document);
    });

    _defineProperty(_assertThisInitialized(_this), "onBackdropClick", function (_ref) {
      var target = _ref.target;
      return target === _this.backdrop && _this.props.hideOnBackdropClick && _this.hide();
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (e) {
      var hideOnEscKeyDown = _this.props.hideOnEscKeyDown;
      if (hideOnEscKeyDown && e.keyCode === Dialog.ESC_KEY) return _this.hide();
      if (e.keyCode !== Dialog.TAB_KEY) return;
      var tabbableElements = _dom_helpers["default"].findTabbableElements(_this.dialog) || [];
      if (!tabbableElements.length) return;
      var maxTabIndex = tabbableElements.length - 1;
      var lastTabbableEl = tabbableElements[e.shiftKey ? 0 : maxTabIndex];

      var focused = _dom_helpers["default"].getActiveElement();

      if (focused !== lastTabbableEl && Array.from(tabbableElements).indexOf(focused) !== -1) return;
      e.preventDefault();
      var firstTabbableEl = tabbableElements[e.shiftKey ? maxTabIndex : 0];
      firstTabbableEl.focus();
    });

    return _this;
  }

  var _proto = Dialog.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/dialog');

    this.setParentZIndex(-1000);
    if (!this.props.show) return;
    global.document.addEventListener('keydown', this.onKeyDown);
    this.lastFocusedElement = _dom_helpers["default"].getActiveElement();
    this.openDialog();
  };

  _proto.componentDidUpdate = function componentDidUpdate(oldProps) {
    var _this$props = this.props,
        show = _this$props.show,
        animationDuration = _this$props.animationDuration;
    if (oldProps.show === show) return;

    if (show) {
      global.document.addEventListener('keydown', this.onKeyDown);
      this.lastFocusedElement = _dom_helpers["default"].getActiveElement();

      _dom_helpers["default"].clearTimeout(this.closingTimeout);

      this.openDialog();
      return;
    }

    global.document.removeEventListener('keydown', this.onKeyDown);
    this.lastFocusedElement && this.lastFocusedElement.focus();
    this.closingTimeout = animationDuration <= 0 ? this.closeDialog() : _dom_helpers["default"].setTimeout(this.closeDialog, animationDuration);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.setBodyScrolling(true);
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        show = _this$props2.show,
        animationDuration = _this$props2.animationDuration,
        animationEasing = _this$props2.animationEasing,
        className = _this$props2.className,
        dialogClassName = _this$props2.dialogClassName,
        ariaLabelledBy = _this$props2.ariaLabelledBy,
        width = _this$props2.width,
        children = _this$props2.children;
    var visible = this.state.visible;
    var disableAnimation = animationDuration <= 0;
    var visibility = visible ? 'visible' : 'hidden';
    var backdropStyle = {
      visibility: visibility
    };
    var dialogStyle = {
      width: width
    };

    if (!disableAnimation) {
      backdropStyle.transition = "opacity " + animationDuration + "ms " + animationEasing + " 0s";
      dialogStyle.transition = "transform " + animationDuration + "ms " + animationEasing + " 0s";
    }

    return _react["default"].createElement("div", {
      className: (0, _classnames["default"])('pui-dialog-container', {
        'pui-dialog-visible': visible
      }),
      ref: function ref(el) {
        return _this2.el = el;
      }
    }, _react["default"].createElement("div", {
      className: (0, _classnames["default"])('pui-dialog-backdrop', {
        'pui-dialog-show': show
      }, className),
      style: backdropStyle,
      onMouseDown: this.onBackdropClick,
      'aria-hidden': !show,
      ref: function ref(el) {
        return _this2.backdrop = el;
      }
    }, _react["default"].createElement("div", {
      role: 'dialog',
      'aria-labelledby': ariaLabelledBy,
      ref: function ref(el) {
        return _this2.dialog = el;
      },
      className: (0, _classnames["default"])('pui-dialog', {
        'pui-dialog-show': show
      }, dialogClassName),
      style: dialogStyle
    }, visible && children)));
  };

  return Dialog;
}(_react["default"].PureComponent);

exports.Dialog = Dialog;

_defineProperty(Dialog, "propTypes", {
  animationDuration: _propTypes["default"].number,
  animationEasing: _propTypes["default"].string,
  ariaLabelledBy: _propTypes["default"].string,
  children: _propTypes["default"].any,
  className: _propTypes["default"].string,
  dialogClassName: _propTypes["default"].string,
  hideOnBackdropClick: _propTypes["default"].bool,
  hideOnEscKeyDown: _propTypes["default"].bool,
  onHide: _propTypes["default"].func.isRequired,
  show: _propTypes["default"].bool,
  title: _propTypes["default"].node,
  width: _propTypes["default"].string,
  updateParentZIndex: _propTypes["default"].bool
});

_defineProperty(Dialog, "defaultProps", {
  animationDuration: 200,
  animationEasing: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'
});

_defineProperty(Dialog, "ESC_KEY", 27);

_defineProperty(Dialog, "TAB_KEY", 9);