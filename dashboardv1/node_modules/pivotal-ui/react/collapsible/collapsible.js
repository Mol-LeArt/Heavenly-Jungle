/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.Collapsible = void 0;

var _react = _interopRequireDefault(require("react"));

var _animation_mixin = _interopRequireDefault(require("../mixins/mixins/animation_mixin"));

var _mixins = _interopRequireDefault(require("../mixins"));

var _helpers = require("../helpers");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bounding_client_rect = require("../mixins/components/bounding_client_rect");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var privates = new WeakMap();

var CollapsibleComponent = /*#__PURE__*/function (_mixin$with) {
  _inheritsLoose(CollapsibleComponent, _mixin$with);

  function CollapsibleComponent(props, context) {
    var _this;

    _this = _mixin$with.call(this, props, context) || this;

    _defineProperty(_assertThisInitialized(_this), "toggleAnimation", function (isAnimating) {
      return privates.set(_assertThisInitialized(_this), {
        isAnimating: isAnimating
      });
    });

    _defineProperty(_assertThisInitialized(_this), "triggerExpansionCallbacks", function (isAnimating) {
      if (isAnimating) return;
      var _this$props = _this.props,
          expanded = _this$props.expanded,
          onEntered = _this$props.onEntered,
          onExited = _this$props.onExited;
      expanded && onEntered && onEntered();
      !expanded && onExited && onExited();
      privates.set(_assertThisInitialized(_this), {
        expanded: expanded
      });
    });

    privates.set(_assertThisInitialized(_this), {
      isAnimating: false,
      expanded: props.expanded
    });
    return _this;
  }

  var _proto = CollapsibleComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/collapse');
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        _this$props2$bounding = _this$props2.boundingClientRect.height,
        height = _this$props2$bounding === void 0 ? 0 : _this$props2$bounding,
        children = _this$props2.children,
        container = _this$props2.container,
        containerReady = _this$props2.containerReady,
        delay = _this$props2.delay,
        expanded = _this$props2.expanded,
        onEntered = _this$props2.onEntered,
        onExited = _this$props2.onExited,
        others = _objectWithoutPropertiesLoose(_this$props2, ["boundingClientRect", "children", "container", "containerReady", "delay", "expanded", "onEntered", "onExited"]);

    var fractionOpen = this.animate('fractionOpen', expanded ? 1 : 0, delay);
    var isAnimating = !expanded && fractionOpen > 0 || expanded && fractionOpen < 1;
    var style = height && isAnimating ? {
      marginBottom: -height * (1 - fractionOpen)
    } : {};

    if (privates.get(this).isAnimating !== isAnimating) {
      this.toggleAnimation(isAnimating);
    }

    if (privates.get(this).expanded !== expanded) {
      this.triggerExpansionCallbacks(isAnimating);
    }

    var props = (0, _helpers.mergeProps)(others, {
      className: ['pui-collapsible', {
        'in': expanded || isAnimating
      }],
      style: isAnimating ? {
        overflow: 'hidden'
      } : {},
      'aria-hidden': !expanded
    });
    return _react["default"].createElement("div", props, _react["default"].createElement("div", {
      className: "pui-collapsible-shield",
      style: style
    }, children));
  };

  return CollapsibleComponent;
}((0, _mixins["default"])(_react["default"].Component)["with"](_animation_mixin["default"]));

_defineProperty(CollapsibleComponent, "propTypes", {
  boundingClientRect: _propTypes["default"].object,
  container: _propTypes["default"].object,
  containerReady: _propTypes["default"].object,
  delay: _propTypes["default"].number,
  disableAnimation: _propTypes["default"].bool,
  expanded: _propTypes["default"].bool,
  onEntered: _propTypes["default"].func,
  onExited: _propTypes["default"].func,
  transitionProgress: _propTypes["default"].number
});

_defineProperty(CollapsibleComponent, "defaultProps", {
  delay: 200
});

var Collapsible = (0, _bounding_client_rect.useBoundingClientRect)(CollapsibleComponent);
exports.Collapsible = Collapsible;