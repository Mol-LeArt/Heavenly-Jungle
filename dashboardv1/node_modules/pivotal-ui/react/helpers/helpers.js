/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.find = exports.mergeProps = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * @component mergeProps
 * @description A helper function that merges default props and provided props
 *
 * @param reactInstanceProps properties passed into the component. Typically
 * `this.props`
 *
 * @param defaultProps default values for the react component
 *
 * @return a merged hash of props, giving precedence to the `reactInstanceProps`.
 * If `className` is defined by both sets of props, the resultant `className`
 * will be a combination of the two.
 * If `style` is defined by both, the resultant `style` hash will be a merge of
 * the two style hashes, with precedence given to `reactInstanceProps`'s style.
 *
 * @example ```js
 * import {mergeProps} from '../helpers';
 *
 * class Ribbon extends React.Component {
 *   render() {
 *     const {children, ...others} = this.props;
 *     const props = mergeProps(others, {className: 'ribbon', style: {height: '50px', color: 'blue'}, id: 'default-ribbon-id'});
 *     return <div {...props}>{children}</div>;
 *   }
 * }
 *
 * ReactDOM.render(<Ribbon className="my-ribbon" style={{height: '25px'}} id="unique-ribbon-id" />, myNode);
 * // Resultant props: {className: 'ribbon my-ribbon', style: {height: '25px', color: 'blue'}, id: 'unique-ribbon-id'}
 * ```
 */
var mergeProps = function mergeProps(reactInstanceProps, defaultProps) {
  var className = reactInstanceProps.className,
      id = reactInstanceProps.id,
      style = reactInstanceProps.style,
      remainingProps = _objectWithoutPropertiesLoose(reactInstanceProps, ["className", "id", "style"]);

  var defaultClassName = defaultProps.className,
      defaultId = defaultProps.id,
      _defaultProps$style = defaultProps.style,
      defaultStyle = _defaultProps$style === void 0 ? {} : _defaultProps$style,
      remainingDefaultProps = _objectWithoutPropertiesLoose(defaultProps, ["className", "id", "style"]);

  className = (0, _classnames["default"])(defaultClassName, className);
  style = _extends({}, defaultStyle, style);
  id = id || defaultId;
  remainingProps = _extends({}, remainingDefaultProps, remainingProps);
  return _extends({
    className: className,
    id: id,
    style: style
  }, remainingProps);
};

exports.mergeProps = mergeProps;

var find = function find(arr, cb) {
  for (var _i = 0; _i < arr.length; _i++) {
    if (cb(arr[_i])) return arr[_i];
  }
};

exports.find = find;