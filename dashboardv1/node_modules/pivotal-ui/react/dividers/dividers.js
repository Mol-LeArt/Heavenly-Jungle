/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.InverseDivider = exports.Divider = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Divider = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Divider, _React$PureComponent);

  function Divider() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = Divider.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/dividers');
  };

  _proto.render = function render() {
    var _this$props = this.props,
        inverse = _this$props.inverse,
        size = _this$props.size,
        others = _objectWithoutPropertiesLoose(_this$props, ["inverse", "size"]);

    var dividerClass = {
      'divider-1': inverse && size !== 'large',
      'divider-2': inverse && size === 'large',
      'divider-alternate-1': !inverse && size !== 'large',
      'divider-alternate-2': !inverse && size === 'large'
    };
    var props = (0, _helpers.mergeProps)(others, {
      className: dividerClass
    });
    return _react["default"].createElement("hr", props);
  };

  return Divider;
}(_react["default"].PureComponent);

exports.Divider = Divider;

_defineProperty(Divider, "propTypes", {
  inverse: _propTypes["default"].bool,
  size: _propTypes["default"].oneOf(['large'])
});

var defDivider = function defDivider(props) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_React$PureComponent2) {
    _inheritsLoose(_class, _React$PureComponent2);

    function _class() {
      return _React$PureComponent2.apply(this, arguments) || this;
    }

    var _proto2 = _class.prototype;

    _proto2.render = function render() {
      return _react["default"].createElement(Divider, _extends({}, props, this.props));
    };

    return _class;
  }(_react["default"].PureComponent), _defineProperty(_class, "propTypes", {
    inverse: _propTypes["default"].bool,
    size: _propTypes["default"].oneOf(['large'])
  }), _temp;
};

var InverseDivider = defDivider({
  inverse: true
});
exports.InverseDivider = InverseDivider;