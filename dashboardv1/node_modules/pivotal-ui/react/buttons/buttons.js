/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.BrandButton = exports.DangerButton = exports.PrimaryButton = exports.DefaultButton = exports.UIButton = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _themeContext = require("../theme-context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var UIButton = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(UIButton, _React$Component);

  function UIButton() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = UIButton.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/buttons');
  };

  _proto.render = function render() {
    var _this$props = this.props,
        alt = _this$props.alt,
        className = _this$props.className,
        flat = _this$props.flat,
        fullWidth = _this$props.fullWidth,
        icon = _this$props.icon,
        iconPosition = _this$props.iconPosition,
        iconOnly = _this$props.iconOnly,
        kind = _this$props.kind,
        large = _this$props.large,
        onDark = _this$props.onDark,
        small = _this$props.small,
        children = _this$props.children,
        others = _objectWithoutPropertiesLoose(_this$props, ["alt", "className", "flat", "fullWidth", "icon", "iconPosition", "iconOnly", "kind", "large", "onDark", "small", "children"]);

    if (iconOnly && !others['aria-label'] && process.env.NODE_ENV === 'development') {
      console.error('Icon-only buttons should have an accessible title set via the "aria-label" prop.');
    }

    var props = _extends({
      className: (0, _classnames["default"])(className, 'pui-btn', "pui-btn--" + kind, {
        'pui-btn--alt': alt,
        'pui-btn--flat': flat,
        'pui-btn--full': fullWidth,
        'pui-btn--icon-only': iconOnly,
        'pui-btn--icon-right': !!icon && iconPosition === 'right',
        'pui-btn--lg': large,
        'pui-btn--on-dark': onDark,
        'pui-btn--sm': small
      })
    }, others);

    var buttonText = Array.isArray(children) ? children.filter(function (child) {
      return typeof child === 'string';
    }).join(' ') : typeof children === 'string' ? children.toString() : null;
    var btnChildren = children;

    if (buttonText && !iconOnly) {
      props = _extends({
        'aria-label': buttonText
      }, props);
      btnChildren = _react["default"].createElement("span", null, children);
    }

    var buttonContent = _react["default"].createElement(_react.Fragment, null, iconPosition === 'right' ? btnChildren : icon, iconPosition === 'right' ? icon : btnChildren);

    return this.props.href ? _react["default"].createElement("a", props, buttonContent) : _react["default"].createElement("button", _extends({
      type: "button"
    }, props), buttonContent);
  };

  return UIButton;
}(_react["default"].Component);

exports.UIButton = UIButton;

_defineProperty(UIButton, "propTypes", {
  alt: _propTypes["default"].bool,
  flat: _propTypes["default"].bool,
  fullWidth: _propTypes["default"].bool,
  href: _propTypes["default"].string,
  icon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].object]),
  iconPosition: _propTypes["default"].oneOf(['left', 'right']),
  iconOnly: _propTypes["default"].bool,
  kind: _propTypes["default"].oneOf(['default', 'danger', 'primary', 'brand']),
  large: _propTypes["default"].bool,
  onDark: _propTypes["default"].bool,
  small: _propTypes["default"].bool
});

_defineProperty(UIButton, "defaultProps", {
  kind: 'default',
  iconPosition: 'left'
});

var defButton = function defButton(kind) {
  return function (props) {
    return _react["default"].createElement(_themeContext.ThemeConsumer, null, function (theme) {
      return _react["default"].createElement(UIButton, _extends({
        kind: kind,
        onDark: theme === 'dark'
      }, props));
    });
  };
};

var DefaultButton = defButton('default');
exports.DefaultButton = DefaultButton;
var PrimaryButton = defButton('primary');
exports.PrimaryButton = PrimaryButton;
var DangerButton = defButton('danger');
exports.DangerButton = DangerButton;
var BrandButton = defButton('brand');
exports.BrandButton = BrandButton;