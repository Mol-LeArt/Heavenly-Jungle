/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.Dropdown = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _mixins = _interopRequireDefault(require("../mixins"));

var _transition_mixin = _interopRequireDefault(require("../mixins/mixins/transition_mixin"));

var _iconography = require("../iconography");

var _flexGrids = require("../flex-grids");

var _scrim = require("./scrim");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var defaultToggleNode = function defaultToggleNode(_ref) {
  var showIcon = _ref.showIcon,
      icon = _ref.icon,
      title = _ref.title,
      props = _objectWithoutPropertiesLoose(_ref, ["showIcon", "icon", "title"]);

  return _react["default"].createElement("button", _extends({
    type: 'button',
    'aria-haspopup': 'true'
  }, props), title, showIcon && _react["default"].createElement(_iconography.Icon, {
    src: icon,
    className: "icon-toggle"
  }));
};

var Dropdown = /*#__PURE__*/function (_mixin$with) {
  _inheritsLoose(Dropdown, _mixin$with);

  function Dropdown(props, context) {
    var _this;

    _this = _mixin$with.call(this, props, context) || this;

    _defineProperty(_assertThisInitialized(_this), "click", function (event) {
      _this.setState({
        open: !_this.state.open
      });

      _this.props.onClick && _this.props.onClick(event);
    });

    _defineProperty(_assertThisInitialized(_this), "scrimClick", function () {
      return _this.setState({
        open: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "menuClick", function () {
      if (!_this.props.closeOnMenuClick) return;

      _this.setState({
        open: false
      });
    });

    _this.state = {
      open: false,
      buttonId: props.buttonId || "dropdown-button-" + Math.round(Math.random() * Number.MAX_SAFE_INTEGER)
    };
    _this.click = _this.click.bind(_assertThisInitialized(_this));
    _this.containerRef = _react["default"].createRef();
    return _this;
  }

  var _proto = Dropdown.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/dropdowns');
  };

  _proto.render = function render() {
    var _this$props = this.props,
        closeOnMenuClick = _this$props.closeOnMenuClick,
        onClick = _this$props.onClick,
        onEntered = _this$props.onEntered,
        onExited = _this$props.onExited,
        _this$props$buttonId = _this$props.buttonId,
        buttonId = _this$props$buttonId === void 0 ? this.state.buttonId : _this$props$buttonId,
        blockingScrim = _this$props.blockingScrim,
        border = _this$props.border,
        buttonAriaLabel = _this$props.buttonAriaLabel,
        buttonClassName = _this$props.buttonClassName,
        children = _this$props.children,
        className = _this$props.className,
        disableScrim = _this$props.disableScrim,
        showIcon = _this$props.showIcon,
        flat = _this$props.flat,
        link = _this$props.link,
        menuAlign = _this$props.menuAlign,
        size = _this$props.size,
        icon = _this$props.icon,
        split = _this$props.split,
        title = _this$props.title,
        toggle = _this$props.toggle,
        floatMenu = _this$props.floatMenu,
        scroll = _this$props.scroll,
        itemClassName = _this$props.itemClassName,
        dropdownMenuClassName = _this$props.dropdownMenuClassName,
        props = _objectWithoutPropertiesLoose(_this$props, ["closeOnMenuClick", "onClick", "onEntered", "onExited", "buttonId", "blockingScrim", "border", "buttonAriaLabel", "buttonClassName", "children", "className", "disableScrim", "showIcon", "flat", "link", "menuAlign", "size", "icon", "split", "title", "toggle", "floatMenu", "scroll", "itemClassName", "dropdownMenuClassName"]);

    var open = this.props.hasOwnProperty('open') ? this.props.open : this.state.open;
    var buttonStyleClasses = (0, _classnames["default"])('dropdown-toggle', buttonClassName);
    var noTitle = typeof title === 'undefined' || title === null || title.length === 0;
    var menuId = buttonId + "-menu";
    var toggleProps = {
      showIcon: noTitle || split || showIcon,
      icon: icon,
      onClick: this.click,
      title: !split && title,
      className: buttonStyleClasses,
      'aria-label': buttonAriaLabel,
      'aria-expanded': open,
      'aria-controls': menuId,
      id: buttonId
    };
    var toggleNode = toggle ? _react["default"].cloneElement(toggle, toggleProps) : defaultToggleNode(toggleProps);
    var menuVisibility = open ? 'dropdown-open' : 'dropdown-closed';
    var dropdownClasses = (0, _classnames["default"])('dropdown', {
      'dropdown-flat': flat,
      'dropdown-split': split,
      'dropdown-link': link,
      'dropdown-lg': size === 'large',
      'dropdown-sm': size === 'small',
      'dropdown-icon-only': !split && noTitle
    }, menuVisibility, className);
    var dropdownMenuClasses = (0, _classnames["default"])('dropdown-menu', {
      'dropdown-border': border,
      'dropdown-menu-right': menuAlign === 'right',
      'dropdown-menu-left': menuAlign === 'left',
      'dropdown-menu-float': split || flat || link || floatMenu || noTitle || menuAlign !== 'none',
      'dropdown-menu-scroll': scroll
    }, dropdownMenuClassName);

    var dropdownOptions = _react["default"].createElement("div", {
      className: dropdownMenuClasses
    }, _react["default"].createElement("ul", {
      "aria-labelledby": buttonId,
      role: "menu",
      onClick: this.menuClick,
      id: menuId
    }, _react["default"].Children.map(children, function (child) {
      return child ? _react["default"].createElement("li", {
        className: itemClassName,
        role: "none"
      }, _react["default"].cloneElement(child, _extends({
        role: 'menuitem'
      }, child.props))) : null;
    })));

    return _react["default"].createElement(_scrim.Scrim, {
      containerRef: this.containerRef,
      onScrimClick: this.scrimClick
    }, _react["default"].createElement("div", _extends({
      className: dropdownClasses
    }, props, {
      ref: this.containerRef
    }), split ? _react["default"].createElement(_flexGrids.Grid, {
      gutter: false
    }, _react["default"].createElement(_flexGrids.FlexCol, {
      className: "dropdown-label"
    }, title), _react["default"].createElement(_flexGrids.FlexCol, {
      fixed: true,
      className: "dropdown-icon-col col-middle"
    }, toggleNode)) : toggleNode, blockingScrim && open && !disableScrim && _react["default"].createElement("div", {
      className: "scrim",
      onClick: this.scrimClick
    }), dropdownOptions));
  };

  return Dropdown;
}((0, _mixins["default"])(_react["default"].Component)["with"](_transition_mixin["default"]));

exports.Dropdown = Dropdown;

_defineProperty(Dropdown, "propTypes", {
  blockingScrim: _propTypes["default"].bool,
  border: _propTypes["default"].bool,
  buttonAriaLabel: _propTypes["default"].string,
  buttonClassName: _propTypes["default"].string,
  buttonId: _propTypes["default"].string,
  closeOnMenuClick: _propTypes["default"].bool,
  disableScrim: _propTypes["default"].bool,
  dropdownMenuClassName: _propTypes["default"].string,
  flat: _propTypes["default"].bool,
  floatMenu: _propTypes["default"].bool,
  icon: _propTypes["default"].string,
  itemClassName: _propTypes["default"].string,
  link: _propTypes["default"].bool,
  menuAlign: _propTypes["default"].oneOf(['none', 'left', 'right']),
  onClick: _propTypes["default"].func,
  onEntered: _propTypes["default"].func,
  onExited: _propTypes["default"].func,
  scroll: _propTypes["default"].bool,
  showIcon: _propTypes["default"].bool,
  size: _propTypes["default"].oneOf(['normal', 'large', 'small']),
  split: _propTypes["default"].bool,
  title: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].object]),
  toggle: _propTypes["default"].node
});

_defineProperty(Dropdown, "defaultProps", {
  blockingScrim: false,
  closeOnMenuClick: true,
  disableScrim: false,
  icon: 'chevron_down',
  menuAlign: 'none',
  scroll: false,
  showIcon: true,
  size: 'normal'
});