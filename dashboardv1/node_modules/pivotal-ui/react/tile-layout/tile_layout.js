/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.TileLayoutItem = exports.TileLayout = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var TileLayout = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(TileLayout, _React$Component);

  function TileLayout() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "getColumnClasses", function (columns) {
      if (columns instanceof Object) {
        var classes = [];

        for (var breakpoint in columns) {
          if (columns.hasOwnProperty(breakpoint)) {
            classes.push("tile-layout-" + breakpoint + "-" + columns[breakpoint]);
          }
        }

        return classes;
      } else {
        return "tile-layout-xs-" + columns;
      }
    });

    return _this;
  }

  var _proto = TileLayout.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/tile-layout');
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        columns = _this$props.columns,
        noGutter = _this$props.noGutter,
        others = _objectWithoutPropertiesLoose(_this$props, ["children", "columns", "noGutter"]);

    var classes = (0, _classnames["default"])(this.getColumnClasses(columns), noGutter ? null : 'tile-gutter', 'tile-layout');
    var props = (0, _helpers.mergeProps)({
      className: classes
    }, others);
    return _react["default"].createElement("div", props, children);
  };

  return TileLayout;
}(_react["default"].Component);

exports.TileLayout = TileLayout;

_defineProperty(TileLayout, "propTypes", {
  columns: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].object]),
  noGutter: _propTypes["default"].bool
});

var TileLayoutItem = /*#__PURE__*/function (_React$Component2) {
  _inheritsLoose(TileLayoutItem, _React$Component2);

  function TileLayoutItem() {
    return _React$Component2.apply(this, arguments) || this;
  }

  var _proto2 = TileLayoutItem.prototype;

  _proto2.componentDidMount = function componentDidMount() {
    require('../../css/tile-layout');
  };

  _proto2.render = function render() {
    return _react["default"].createElement("div", (0, _helpers.mergeProps)({
      className: 'tile-item'
    }, this.props));
  };

  return TileLayoutItem;
}(_react["default"].Component);

exports.TileLayoutItem = TileLayoutItem;