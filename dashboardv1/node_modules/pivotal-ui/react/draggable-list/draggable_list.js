/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.DraggableListItem = exports.DraggableList = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _move_helper = _interopRequireDefault(require("./move_helper"));

var _iconography = require("../iconography");

var _helpers = require("../helpers");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var childrenIndices = function childrenIndices(children) {
  return children.map(function (child, i) {
    return i;
  });
};

var DraggableList = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(DraggableList, _React$Component);

  function DraggableList(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    _defineProperty(_assertThisInitialized(_this), "dragStart", function (draggingId, _ref) {
      var dataTransfer = _ref.dataTransfer;
      dataTransfer.effectAllowed = 'move';

      try {
        dataTransfer.dropEffect = 'move';
        dataTransfer.setData('text/plain', '');
      } catch (err) {
        dataTransfer.setData('text', '');
      }

      setTimeout(function () {
        return _this.setState({
          draggingId: draggingId
        });
      }, 0);
    });

    _defineProperty(_assertThisInitialized(_this), "dragEnd", function () {
      _this.setState({
        draggingId: null
      });

      _this.props.onDragEnd && _this.props.onDragEnd(_this.state.itemIndices);
    });

    _defineProperty(_assertThisInitialized(_this), "dragEnter", function (e) {
      var _this$state = _this.state,
          draggingId = _this$state.draggingId,
          itemIndices = _this$state.itemIndices;
      var endDraggingId = Number(e.currentTarget.getAttribute('data-dragging-id'));
      if (draggingId === null || Number.isNaN(endDraggingId)) return;
      var startIndex = itemIndices.indexOf(draggingId);
      var endIndex = itemIndices.indexOf(endDraggingId);
      (0, _move_helper["default"])(itemIndices, startIndex, endIndex);

      _this.setState({
        itemIndices: itemIndices
      });
    });

    _this.state = {
      itemIndices: childrenIndices(props.children),
      draggingId: null
    };
    return _this;
  }

  var _proto = DraggableList.prototype;

  _proto.componentDidMount = function componentDidMount() {
    require('../../css/lists');
  };

  DraggableList.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.children.length !== state.itemIndices.length) {
      return {
        itemIndices: childrenIndices(props.children),
        draggingId: null
      };
    }

    return null;
  };

  _proto.render = function render() {
    var items = [];
    var grabbed;

    var _this$props = this.props,
        children = _this$props.children,
        innerClassName = _this$props.innerClassName,
        onDragEnd = _this$props.onDragEnd,
        others = _objectWithoutPropertiesLoose(_this$props, ["children", "innerClassName", "onDragEnd"]);

    _react["default"].Children.forEach(children, function (child, draggingId) {
      grabbed = this.state.draggingId === draggingId;
      items.push(_react["default"].cloneElement(child, {
        grabbed: grabbed,
        onDragStart: this.dragStart.bind(this, draggingId),
        onDragEnd: this.dragEnd,
        onDragEnter: this.dragEnter,
        draggingId: draggingId,
        key: draggingId,
        className: innerClassName
      }));
    }, this);

    var sortedItems = this.state.itemIndices.map(function (i) {
      return items[i];
    });
    var props = (0, _helpers.mergeProps)(others, {
      className: {
        'list-draggable': true,
        dragging: this.state.draggingId !== null
      }
    });
    return _react["default"].createElement("ul", props, sortedItems);
  };

  return DraggableList;
}(_react["default"].Component);

exports.DraggableList = DraggableList;

_defineProperty(DraggableList, "propTypes", {
  onDragEnd: _propTypes["default"].func,
  innerClassName: _propTypes["default"].string
});

var DraggableListItem = /*#__PURE__*/function (_React$Component2) {
  _inheritsLoose(DraggableListItem, _React$Component2);

  function DraggableListItem(props, context) {
    var _this2;

    _this2 = _React$Component2.call(this, props, context) || this;

    _defineProperty(_assertThisInitialized(_this2), "onMouseEnter", function () {
      return _this2.setState({
        hover: true
      });
    });

    _defineProperty(_assertThisInitialized(_this2), "onMouseLeave", function () {
      return _this2.setState({
        hover: false
      });
    });

    _this2.state = {
      hover: false
    };
    return _this2;
  }

  var _proto2 = DraggableListItem.prototype;

  _proto2.componentDidMount = function componentDidMount() {
    require('../../css/lists');
  };

  _proto2.render = function render() {
    var hover = this.state.hover;
    var _this$props2 = this.props,
        grabbed = _this$props2.grabbed,
        onDragStart = _this$props2.onDragStart,
        onDragEnd = _this$props2.onDragEnd,
        onDragEnter = _this$props2.onDragEnter,
        draggingId = _this$props2.draggingId,
        children = _this$props2.children;
    var onMouseEnter = this.onMouseEnter,
        onMouseLeave = this.onMouseLeave;
    var className = (0, _classnames["default"])({
      'pan': true,
      grabbed: grabbed,
      hover: hover
    });
    var innerClassName = (0, _classnames["default"])(this.props.className, 'draggable-item-content');
    var props = {
      className: className,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      onDragEnter: onDragEnter,
      onDragOver: function onDragOver(e) {
        return e.preventDefault();
      },
      draggable: !grabbed,
      'data-dragging-id': draggingId
    };
    return _react["default"].createElement("li", _extends({}, props, {
      "aria-dropeffect": "move"
    }), _react["default"].createElement("div", {
      className: innerClassName
    }, _react["default"].createElement("div", {
      className: "draggable-grip mhs",
      "aria-grabbed": grabbed,
      role: "button"
    }, _react["default"].createElement(_iconography.Icon, {
      src: "grip"
    }), _react["default"].createElement("span", {
      className: "sr-only"
    }, "Drag to reorder")), _react["default"].createElement("span", {
      className: "draggable-child"
    }, children)));
  };

  return DraggableListItem;
}(_react["default"].Component);

exports.DraggableListItem = DraggableListItem;

_defineProperty(DraggableListItem, "propTypes", {
  draggingId: _propTypes["default"].number,
  onMouseEnter: _propTypes["default"].func,
  onMouseLeave: _propTypes["default"].func,
  onDragStart: _propTypes["default"].func,
  onDragEnter: _propTypes["default"].func,
  onDragEnd: _propTypes["default"].func,
  grabbed: _propTypes["default"].bool,
  className: _propTypes["default"].string
});