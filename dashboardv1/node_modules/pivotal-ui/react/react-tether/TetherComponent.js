/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _tether = _interopRequireDefault(require("tether"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (!_tether["default"]) {
  console.error('It looks like Tether has not been included. Please load this dependency first https://github.com/HubSpot/tether');
}

var renderElementToPropTypes = [_propTypes["default"].string, _propTypes["default"].shape({
  appendChild: _propTypes["default"].func.isRequired
})];

var childrenPropType = function childrenPropType(_ref, propName, componentName) {
  var children = _ref.children;

  var childCount = _react.Children.count(children);

  if (childCount <= 0) {
    return new Error(componentName + " expects at least one child to use as the target element.");
  } else if (childCount > 2) {
    return new Error("Only a max of two children allowed in " + componentName + ".");
  }
};

var attachmentPositions = ['auto auto', 'top left', 'top center', 'top right', 'middle left', 'middle center', 'middle right', 'bottom left', 'bottom center', 'bottom right'];

var TetherComponent = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TetherComponent, _Component);

  function TetherComponent() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "_targetNode", null);

    _defineProperty(_assertThisInitialized(_this), "_elementParentNode", null);

    _defineProperty(_assertThisInitialized(_this), "_tether", false);

    return _this;
  }

  var _proto = TetherComponent.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._targetNode = _reactDom["default"].findDOMNode(this);

    this._update();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    this._targetNode = _reactDom["default"].findDOMNode(this);

    this._update();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this._destroy();
  };

  _proto.getTetherInstance = function getTetherInstance() {
    return this._tether;
  };

  _proto.disable = function disable() {
    this._tether.disable();
  };

  _proto.enable = function enable() {
    this._tether.enable();
  };

  _proto.on = function on(event, handler, ctx) {
    this._tether.on(event, handler, ctx);
  };

  _proto.once = function once(event, handler, ctx) {
    this._tether.once(event, handler, ctx);
  };

  _proto.off = function off(event, handler) {
    this._tether.off(event, handler);
  };

  _proto.position = function position() {
    this._tether.position();
  };

  _proto._registerEventListeners = function _registerEventListeners() {
    var _this2 = this,
        _arguments = arguments;

    this.on('update', function () {
      return _this2.props.onUpdate && _this2.props.onUpdate.apply(_this2, _arguments);
    });
    this.on('repositioned', function () {
      return _this2.props.onRepositioned && _this2.props.onRepositioned.apply(_this2, _arguments);
    });
  };

  _proto._destroy = function _destroy() {
    if (this._elementParentNode) {
      _reactDom["default"].unmountComponentAtNode(this._elementParentNode);

      this._elementParentNode.parentNode.removeChild(this._elementParentNode);
    }

    if (this._tether) {
      this._tether.destroy();
    }

    this._elementParentNode = null;
    this._tether = null;
  };

  _proto._update = function _update() {
    var _this3 = this;

    var _this$props = this.props,
        children = _this$props.children,
        renderElementTag = _this$props.renderElementTag;

    var elementComponent = _react.Children.toArray(children)[1]; // if no element component provided, bail out


    if (!elementComponent) {
      // destroy Tether element if it has been created
      if (this._tether) {
        this._destroy();
      }

      return;
    } // create element node container if it hasn't been yet


    if (!this._elementParentNode) {
      // create a node that we can stick our content Component in
      this._elementParentNode = document.createElement(renderElementTag); // append node to the render node

      this._renderNode.appendChild(this._elementParentNode);
    } // render element component into the DOM


    _reactDom["default"].unstable_renderSubtreeIntoContainer(this, elementComponent, this._elementParentNode, function () {
      // if we're not destroyed, update Tether once the subtree has finished rendering
      if (_this3._elementParentNode) {
        _this3._updateTether();
      }
    });
  };

  _proto._updateTether = function _updateTether() {
    var _this4 = this;

    var _this$props2 = this.props,
        children = _this$props2.children,
        renderElementTag = _this$props2.renderElementTag,
        renderElementTo = _this$props2.renderElementTo,
        id = _this$props2.id,
        className = _this$props2.className,
        style = _this$props2.style,
        options = _objectWithoutPropertiesLoose(_this$props2, ["children", "renderElementTag", "renderElementTo", "id", "className", "style"]);

    var tetherOptions = _extends({
      target: this._targetNode,
      element: this._elementParentNode
    }, options);

    if (id) {
      this._elementParentNode.id = id;
    }

    if (className) {
      this._elementParentNode.className = className;
    }

    if (style) {
      Object.keys(style).forEach(function (key) {
        _this4._elementParentNode.style[key] = style[key];
      });
    }

    if (!this._tether) {
      this._tether = new _tether["default"](tetherOptions);

      this._registerEventListeners();
    } else {
      this._tether.setOptions(tetherOptions);
    }

    this._tether.position();
  };

  _proto.render = function render() {
    return _react.Children.toArray(this.props.children)[0];
  };

  _createClass(TetherComponent, [{
    key: "_renderNode",
    get: function get() {
      var renderElementTo = this.props.renderElementTo;

      if (typeof renderElementTo === 'string') {
        return document.querySelector(renderElementTo);
      } else {
        return renderElementTo || document.body;
      }
    }
  }]);

  return TetherComponent;
}(_react.Component);

_defineProperty(TetherComponent, "propTypes", {
  renderElementTag: _propTypes["default"].string,
  renderElementTo: _propTypes["default"].oneOfType(renderElementToPropTypes),
  attachment: _propTypes["default"].oneOf(attachmentPositions).isRequired,
  targetAttachment: _propTypes["default"].oneOf(attachmentPositions),
  offset: _propTypes["default"].string,
  targetOffset: _propTypes["default"].string,
  targetModifier: _propTypes["default"].string,
  enabled: _propTypes["default"].bool,
  classes: _propTypes["default"].object,
  classPrefix: _propTypes["default"].string,
  optimizations: _propTypes["default"].object,
  constraints: _propTypes["default"].array,
  id: _propTypes["default"].string,
  className: _propTypes["default"].string,
  style: _propTypes["default"].object,
  onUpdate: _propTypes["default"].func,
  onRepositioned: _propTypes["default"].func,
  children: childrenPropType
});

_defineProperty(TetherComponent, "defaultProps", {
  renderElementTag: 'div',
  renderElementTo: null
});

var _default = TetherComponent;
exports["default"] = _default;