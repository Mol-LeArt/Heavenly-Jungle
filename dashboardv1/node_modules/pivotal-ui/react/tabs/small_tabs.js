/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.SmallTabs = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _collapsible = require("../collapsible");

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SmallTab = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(SmallTab, _React$PureComponent);

  function SmallTab() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = SmallTab.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        animation = _this$props.animation,
        ariaLabelledBy = _this$props.ariaLabelledBy,
        children = _this$props.children,
        disabled = _this$props.disabled,
        expanded = _this$props.expanded,
        header = _this$props.header,
        _onClick = _this$props.onClick,
        paneId = _this$props.paneId;
    var delay;
    if (!animation) delay = 0;
    var collapsibleProps = {
      'aria-labelledby': ariaLabelledBy,
      className: 'tab-content',
      delay: delay,
      expanded: expanded,
      role: 'tabpanel'
    };
    return _react["default"].createElement("div", null, _react["default"].createElement("div", {
      className: "tab-heading tab-left"
    }, _react["default"].createElement("h4", {
      className: "tab-title nav mvxl",
      role: "presentation"
    }, _react["default"].createElement("a", {
      "aria-expanded": expanded,
      "aria-controls": paneId,
      "aria-selected": expanded,
      className: (0, _classnames["default"])({
        disabled: disabled,
        active: expanded
      }),
      role: "tab",
      onClick: function onClick(e) {
        e.preventDefault();

        _onClick();
      },
      href: "#"
    }, header))), _react["default"].createElement(_collapsible.Collapsible, collapsibleProps, children));
  };

  return SmallTab;
}(_react["default"].PureComponent);

_defineProperty(SmallTab, "propTypes", {
  animation: _propTypes["default"].bool,
  ariaLabelledBy: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  expanded: _propTypes["default"].bool,
  header: _propTypes["default"].node,
  onClick: _propTypes["default"].func,
  paneId: _propTypes["default"].string
});

var SmallTabs = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(SmallTabs, _React$Component);

  function SmallTabs() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto2 = SmallTabs.prototype;

  _proto2.render = function render() {
    var _this$props2 = this.props,
        actions = _this$props2.actions,
        activeKey = _this$props2.activeKey,
        animation = _this$props2.animation,
        children = _this$props2.children,
        className = _this$props2.className,
        id = _this$props2.id,
        handleClick = _this$props2.handleClick,
        onSelect = _this$props2.onSelect,
        smallScreenClassName = _this$props2.smallScreenClassName,
        tabType = _this$props2.tabType;
    var smallScreenClasses = (0, _classnames["default"])(["tab-" + tabType + "-small-screen", 'panel-group', smallScreenClassName, className]);

    var childArray = _react["default"].Children.toArray(children);

    var childrenAsPanels = childArray.map(function (child, key) {
      var _child$props = child.props,
          ariaLabelledBy = _child$props['aria-labelledby'],
          disabled = _child$props.disabled,
          title = _child$props.title,
          eventKey = _child$props.eventKey,
          children = _child$props.children;
      var paneId = id + "-pane-" + key;
      var tabId = id + "-tab-" + key;
      var onClick = disabled ? function () {} : function (e) {
        return handleClick(e, eventKey, onSelect);
      };
      var myProps = {
        animation: animation,
        ariaLabelledBy: ariaLabelledBy || tabId,
        disabled: disabled,
        expanded: eventKey === activeKey,
        header: title,
        key: key,
        onClick: onClick,
        paneId: paneId
      };
      return _react["default"].createElement(SmallTab, myProps, children);
    });
    var actionsNode = actions ? _react["default"].createElement("div", {
      className: "tabs-action"
    }, actions) : null;
    return _react["default"].createElement("div", {
      className: smallScreenClasses
    }, actionsNode, childrenAsPanels);
  };

  return SmallTabs;
}(_react["default"].Component);

exports.SmallTabs = SmallTabs;

_defineProperty(SmallTabs, "propTypes", {
  actions: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].object]),
  activeKey: _propTypes["default"].number,
  animation: _propTypes["default"].bool,
  id: _propTypes["default"].string,
  handleClick: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  smallScreenClassName: _propTypes["default"].string,
  tabType: _propTypes["default"].string
});