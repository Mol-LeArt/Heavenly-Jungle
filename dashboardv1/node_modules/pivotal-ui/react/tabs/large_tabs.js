/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.LargeTabs = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _animation_mixin = _interopRequireDefault(require("../mixins/mixins/animation_mixin"));

var _tab_content = _interopRequireDefault(require("./tab_content"));

var _tab_headers = _interopRequireDefault(require("./tab_headers"));

var _classnames2 = _interopRequireDefault(require("classnames"));

var _mixins = _interopRequireDefault(require("../mixins"));

var _flexGrids = require("../flex-grids");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var LargeTabs = /*#__PURE__*/function (_mixin$with) {
  _inheritsLoose(LargeTabs, _mixin$with);

  function LargeTabs() {
    return _mixin$with.apply(this, arguments) || this;
  }

  var _proto = LargeTabs.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        actions = _this$props.actions,
        activeKey = _this$props.activeKey,
        className = _this$props.className,
        childArray = _this$props.childArray,
        handleClick = _this$props.handleClick,
        id = _this$props.id,
        largeScreenClassName = _this$props.largeScreenClassName,
        onSelect = _this$props.onSelect,
        paneWidth = _this$props.paneWidth,
        position = _this$props.position,
        previousActiveKey = _this$props.previousActiveKey,
        tabType = _this$props.tabType,
        tabWidth = _this$props.tabWidth,
        transitionProgress = _this$props.transitionProgress,
        props = _objectWithoutPropertiesLoose(_this$props, ["actions", "activeKey", "className", "childArray", "handleClick", "id", "largeScreenClassName", "onSelect", "paneWidth", "position", "previousActiveKey", "tabType", "tabWidth", "transitionProgress"]);

    var currentActiveKey = transitionProgress >= 0.5 ? activeKey : previousActiveKey;
    var largeScreenClasses = (0, _classnames2["default"])(["tab-" + tabType, largeScreenClassName, className]);
    var actionsNode = actions ? _react["default"].createElement("div", {
      className: "tabs-action"
    }, actions) : null;
    var isLeft = position === 'left';

    if (isLeft) {
      var _classnames;

      return _react["default"].createElement(_flexGrids.Grid, _extends({
        className: (0, _classnames2["default"])(largeScreenClasses, 'tab-left', 'clearfix')
      }, props), _react["default"].createElement(_flexGrids.FlexCol, {
        fixed: true,
        className: (0, _classnames2["default"])((_classnames = {}, _classnames["col-" + tabWidth] = !!tabWidth, _classnames))
      }, actionsNode, _react["default"].createElement(_tab_headers["default"], {
        childArray: childArray,
        activeKey: activeKey,
        handleClick: handleClick,
        isLeft: isLeft,
        id: id,
        onSelect: onSelect
      })), _react["default"].createElement(_flexGrids.FlexCol, null, _react["default"].createElement(_tab_content["default"], {
        childArray: childArray,
        activeKey: currentActiveKey,
        id: id,
        isLeft: isLeft,
        paneWidth: paneWidth,
        transitionProgress: transitionProgress
      })));
    }

    return _react["default"].createElement("div", _extends({
      className: largeScreenClasses
    }, props), actionsNode, _react["default"].createElement(_tab_headers["default"], {
      childArray: childArray,
      activeKey: activeKey,
      handleClick: handleClick,
      isLeft: isLeft,
      id: id,
      onSelect: onSelect,
      tabWidth: tabWidth
    }), _react["default"].createElement(_tab_content["default"], {
      childArray: childArray,
      activeKey: currentActiveKey,
      id: id,
      isLeft: isLeft,
      paneWidth: paneWidth,
      transitionProgress: transitionProgress
    }));
  };

  return LargeTabs;
}((0, _mixins["default"])(_react["default"].Component)["with"](_animation_mixin["default"]));

exports.LargeTabs = LargeTabs;

_defineProperty(LargeTabs, "propTypes", {
  actions: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].object]),
  activeKey: _propTypes["default"].any,
  childArray: _propTypes["default"].array,
  handleClick: _propTypes["default"].func,
  id: _propTypes["default"].string,
  largeScreenClassName: _propTypes["default"].string,
  onSelect: _propTypes["default"].func,
  paneWidth: _propTypes["default"].number,
  position: _propTypes["default"].oneOf(['top', 'left']),
  previouslyActiveKey: _propTypes["default"].any,
  tabType: _propTypes["default"].oneOf(['simple', 'simple-alt', 'left']),
  tabWidth: _propTypes["default"].number
});