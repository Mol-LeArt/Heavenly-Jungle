/* (c) Copyright 2020 Pivotal Software, Inc. All Rights Reserved. */
"use strict";

exports.__esModule = true;
exports.ErrorAlert = exports.WarningAlert = exports.InfoAlert = exports.SuccessAlert = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _helpers = require("../helpers");

var _iconography = require("../iconography");

var _buttons = require("../buttons");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Alert = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Alert, _React$PureComponent);

  function Alert(props, context) {
    var _this;

    _this = _React$PureComponent.call(this, props, context) || this;

    _defineProperty(_assertThisInitialized(_this), "handleAlertDismiss", function () {
      var onDismiss = _this.props.onDismiss;
      if (_this.props.onDismiss) onDismiss();

      _this.setState({
        alertVisible: false
      });
    });

    _this.state = {
      alertVisible: true
    };
    return _this;
  }

  var _proto = Alert.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        alertIcon = _this$props.alertIcon,
        kind = _this$props.kind,
        children = _this$props.children,
        closeLabel = _this$props.closeLabel,
        dismissable = _this$props.dismissable,
        label = _this$props.label,
        __ignore = _this$props.onDismiss,
        show = _this$props.show,
        withIcon = _this$props.withIcon,
        others = _objectWithoutPropertiesLoose(_this$props, ["alertIcon", "kind", "children", "closeLabel", "dismissable", "label", "onDismiss", "show", "withIcon"]);

    var props = (0, _helpers.mergeProps)(others, {
      role: 'alert',
      className: (0, _classnames["default"])('pui-alert', "pui-alert-" + kind, {
        'pui-alert-dismissable': dismissable
      })
    });
    var visible = typeof show === 'undefined' ? this.state.alertVisible : show;
    if (!visible) return _react["default"].createElement("span", null);
    var iconColumn;

    if (withIcon) {
      iconColumn = _react["default"].createElement("div", {
        className: "col col-fixed col-middle pan"
      }, _react["default"].createElement(_iconography.Icon, {
        src: alertIcon
      }));
    }

    var dismissableColumn;

    if (dismissable) {
      dismissableColumn = _react["default"].createElement("div", {
        className: "col col-fixed col-middle pan"
      }, _react["default"].createElement(_buttons.DefaultButton, {
        className: 'pui-alert-close-btn',
        iconOnly: true,
        flat: true,
        'aria-label': closeLabel,
        onClick: this.handleAlertDismiss,
        icon: _react["default"].createElement(_iconography.Icon, {
          src: "close"
        })
      }));
    }

    return _react["default"].createElement("div", props, _react["default"].createElement("div", {
      className: "grid"
    }, iconColumn, _react["default"].createElement("div", {
      className: "col col-middle"
    }, _react["default"].createElement("div", null, label && _react["default"].createElement("span", {
      className: "em-high"
    }, label, ": "), children)), dismissableColumn));
  };

  return Alert;
}(_react["default"].PureComponent);

_defineProperty(Alert, "propTypes", {
  alertIcon: _propTypes["default"].string,
  closeLabel: _propTypes["default"].node,
  dismissable: _propTypes["default"].bool,
  kind: _propTypes["default"].oneOf(['success', 'danger', 'info', 'warning']),
  label: _propTypes["default"].string,
  onDismiss: _propTypes["default"].func,
  show: _propTypes["default"].bool,
  withIcon: _propTypes["default"].bool
});

_defineProperty(Alert, "defaultProps", {
  closeLabel: 'Close alert',
  dismissable: false,
  withIcon: false
});

var defAlert = function defAlert(props) {
  var _class, _temp;

  return _temp = _class = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(_class, _React$Component);

    function _class() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto2 = _class.prototype;

    _proto2.componentDidMount = function componentDidMount() {
      require('../../css/alerts');
    };

    _proto2.render = function render() {
      return _react["default"].createElement(Alert, _extends({}, props, this.props));
    };

    return _class;
  }(_react["default"].Component), _defineProperty(_class, "propTypes", {
    dismissable: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].func]),
    withIcon: _propTypes["default"].bool
  }), _temp;
};

var SuccessAlert = defAlert({
  kind: 'success',
  alertIcon: 'check_circle',
  label: 'Success'
});
exports.SuccessAlert = SuccessAlert;
var InfoAlert = defAlert({
  kind: 'info',
  alertIcon: 'info',
  label: 'Info'
});
exports.InfoAlert = InfoAlert;
var WarningAlert = defAlert({
  kind: 'warning',
  alertIcon: 'warning',
  label: 'Warning'
});
exports.WarningAlert = WarningAlert;
var ErrorAlert = defAlert({
  kind: 'danger',
  alertIcon: 'report',
  label: 'Error'
});
exports.ErrorAlert = ErrorAlert;