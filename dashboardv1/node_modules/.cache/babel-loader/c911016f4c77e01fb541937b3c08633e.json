{"ast":null,"code":"var _jsxFileName = \"/home/danielo/Development/ui/dashboardV1/src/Mint.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport MOLCOMMONS_ABI from './MOLCOMMONS_ABI';\nimport { ethers } from 'ethers';\nimport { CommunityContext } from './GlobalContext';\nimport axios from 'axios';\nimport moralis from \"moralis\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmoralis.initialize(process.env.REACT_APP_MORALIS_APPLICATION_ID);\nmoralis.serverURL = process.env.REACT_APP_MORALIS_SERVER_URL;\n\nconst Mint = ({\n  metadata,\n  sale,\n  ethPrice,\n  coinPrice,\n  img\n}) => {\n  _s();\n\n  // ----- useContext\n  const {\n    commons\n  } = useContext(CommunityContext);\n  const [imageHash, setImageHash] = useState('');\n  const [imageUrl, setImageUrl] = useState('profile.jpg');\n  const [commonsAddress, setCommonsAddress] = useState(''); // ----- Reaect Router Config\n\n  const history = useHistory();\n\n  const getCommons = async () => {\n    var commonsId = window.location.search.substring(11);\n    const query = new moralis.Query(Commons);\n    query.equalTo(\"objectId\", commonsId);\n    const results = await query.find();\n    var commonsObject;\n\n    for (let i = 0; i < results.length; i++) // wtf??? only expecting one result. gotta find acceptable solution for this\n    {\n      const object = results[i];\n      commonsObject = object;\n      setCommonsAddress(object.get('contractAddress'));\n    }\n  }; // ----- Smart Contract Config\n\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n  const signer = provider.getSigner(); // ----- Upload image to Fleek Storage\n\n  const upload = async (data, contract) => {\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`; //let   data = new FormData();\n    //data.append(\"file\", selectedFile, selectedFile.name );\n\n    const res = await axios.post(url, data, {\n      maxContentLength: \"Infinity\",\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: process.env.REACT_APP_PINATA_PUBLIC,\n        pinata_secret_api_key: process.env.REACT_APP_PINATA_PRIVATE\n      }\n    });\n    console.log(res.data);\n    setImageHash(res.data.IpfsHash);\n    setImageUrl('https://gateway.pinata.cloud/ipfs/' + res.data.IpfsHash);\n    /*  const input = {\n        apiKey: process.env.REACT_APP_FLEEK_API_KEY,\n        apiSecret: process.env.REACT_APP_FLEEK_API_SECRET,\n        bucket: 'audsssy-team-bucket',\n        key: metadata.title,\n        data,\n      }*/\n\n    try {\n      //const result = await fleek.upload(input)\n      //console.log('this is image hash from fleek - ' + result.hash)\n      // Prepare to mint NFT\n      uploadAndMint(res.data.IpfsHash);\n    } catch (e) {\n      console.log('error is - ' + e);\n    }\n  }; // ----- Upload tokenURI and Mint NFT\n\n\n  const uploadAndMint = async hash => {\n    await getCommons();\n    const baseUrl = 'https://ipfs.io/ipfs/'; // Add timestamp to metadata\n\n    const date = new Date();\n    const timestamp = date.getTime();\n    const dict = { ...metadata,\n      image: baseUrl + hash,\n      createdAt: timestamp\n    };\n    console.log('tokenURI at mint is - ', dict);\n    alert('tokenURI at mint is - ', dict);\n    /*  const data = JSON.stringify(dict)\n      const i = {\n        apiKey: process.env.REACT_APP_FLEEK_API_KEY,\n        apiSecret: process.env.REACT_APP_FLEEK_API_SECRET,\n        bucket: 'audsssy-team-bucket',\n        key: hash,\n        data,\n      }\n    */\n\n    try {\n      // Uplaod tokenUri to Fleek\n      //    const result = await fleek.upload(i)\n      //    console.log('this is tokenUri hash from fleek - ' + result.hash)\n      // Mint NFT\n      const tokenUri = baseUrl + hash;\n      console.log(tokenUri);\n      const p = ethers.utils.parseEther(ethPrice);\n      const c = ethers.utils.parseEther(coinPrice);\n      molCommons(p, c, tokenUri);\n    } catch (e) {\n      console.log('error is - ' + e);\n    }\n  }; // ----- Mint Gamma with MolVault\n\n\n  const molCommons = async (price, coins, tokenURI) => {\n    console.log('MolVault contract is - ', commons);\n\n    const _contract = new ethers.Contract(commons, MOLCOMMONS_ABI, signer);\n\n    try {\n      const tx = await _contract.mint(price, coins, tokenURI, sale);\n      console.log('tx.hash for minting - ' + tx.hash);\n      tx.wait().then(receipt => {\n        if (receipt.confirmations === 1) {\n          console.log('mint receipt is - ', receipt);\n          history.push(`/community`); // Store user address to Firestore\n\n          addMinterToCoinHolders();\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }; // ----- Listen to contract events\n  // function contractListener(contract) {\n  //   contract.on('Transfer', (from, to, tokenId) => {\n  //     console.log('Token minted - ', from, to)\n  //     console.log('NFT tokenId minted - ' + tokenId)\n  //   })\n  //   contract.on('gRoyaltiesMinted', (contractAddress) => {\n  //     console.log('gRoyalties minted at contract address  - ', contractAddress)\n  //   })\n  // }\n  // Add minter to Firestore\n\n\n  const addMinterToCoinHolders = async () => {\n    console.log(commons); // const docRef = projectFirestore.collection('vault').doc(commons)   \n\n    /*   signer.getAddress().then(address => {\n         console.log(address)\n          docRef.update({\n            holders: firebaseFieldValue.arrayUnion(address),\n          }) \n       })*/\n  };\n\n  useEffect(() => {\n    upload(img); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Mint, \"Fk6d9nRe11zcTZomFYou1b0/Oxo=\", false, function () {\n  return [useHistory];\n});\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/home/danielo/Development/ui/dashboardV1/src/Mint.js"],"names":["React","useEffect","useContext","useState","useHistory","MOLCOMMONS_ABI","ethers","CommunityContext","axios","moralis","initialize","process","env","REACT_APP_MORALIS_APPLICATION_ID","serverURL","REACT_APP_MORALIS_SERVER_URL","Mint","metadata","sale","ethPrice","coinPrice","img","commons","imageHash","setImageHash","imageUrl","setImageUrl","commonsAddress","setCommonsAddress","history","getCommons","commonsId","window","location","search","substring","query","Query","Commons","equalTo","results","find","commonsObject","i","length","object","get","provider","providers","Web3Provider","ethereum","signer","getSigner","upload","data","contract","url","res","post","maxContentLength","headers","_boundary","pinata_api_key","REACT_APP_PINATA_PUBLIC","pinata_secret_api_key","REACT_APP_PINATA_PRIVATE","console","log","IpfsHash","uploadAndMint","e","hash","baseUrl","date","Date","timestamp","getTime","dict","image","createdAt","alert","tokenUri","p","utils","parseEther","c","molCommons","price","coins","tokenURI","_contract","Contract","tx","mint","wait","then","receipt","confirmations","push","addMinterToCoinHolders"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAGAA,OAAO,CAACC,UAAR,CAAmBC,OAAO,CAACC,GAAR,CAAYC,gCAA/B;AACAJ,OAAO,CAACK,SAAR,GAAoBH,OAAO,CAACC,GAAR,CAAYG,4BAAhC;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,QAAlB;AAA4BC,EAAAA,SAA5B;AAAuCC,EAAAA;AAAvC,CAAD,KAAkD;AAAA;;AAC7D;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcpB,UAAU,CAACK,gBAAD,CAA9B;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,aAAD,CAAxC;AACA,QAAM,CAACwB,cAAD,EAAiBC,iBAAjB,IAAsCzB,QAAQ,CAAC,EAAD,CAApD,CAL6D,CAO7D;;AACA,QAAM0B,OAAO,GAAGzB,UAAU,EAA1B;;AAGA,QAAM0B,UAAU,GAAG,YACmB;AACI,QAAIC,SAAS,GAAMC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,SAAvB,CAAkC,EAAlC,CAAnB;AACA,UAAMC,KAAK,GAAG,IAAI3B,OAAO,CAAC4B,KAAZ,CAAmBC,OAAnB,CAAd;AACAF,IAAAA,KAAK,CAACG,OAAN,CAAe,UAAf,EAA2BR,SAA3B;AACA,UAAMS,OAAO,GAAG,MAAMJ,KAAK,CAACK,IAAN,EAAtB;AACA,QAAIC,aAAJ;;AACA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,OAAO,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA2C;AAC3C;AACI,YAAME,MAAM,GAAGL,OAAO,CAACG,CAAD,CAAtB;AACAD,MAAAA,aAAa,GAAGG,MAAhB;AACAjB,MAAAA,iBAAiB,CAAEiB,MAAM,CAACC,GAAP,CAAW,iBAAX,CAAF,CAAjB;AACH;AACJ,GAbvC,CAX6D,CA0B7D;;;AACA,QAAMC,QAAQ,GAAG,IAAIzC,MAAM,CAAC0C,SAAP,CAAiBC,YAArB,CAAkCjB,MAAM,CAACkB,QAAzC,EAAmD,KAAnD,CAAjB;AACA,QAAMC,MAAM,GAAGJ,QAAQ,CAACK,SAAT,EAAf,CA5B6D,CA8B7D;;AACA,QAAMC,MAAM,GAAG,OAAOC,IAAP,EAAaC,QAAb,KAA0B;AAEvC,UAAMC,GAAG,GAAI,gDAAb,CAFuC,CAGvC;AACA;;AACA,UAAMC,GAAG,GAAG,MAAMjD,KAAK,CAACkD,IAAN,CAAYF,GAAZ,EAAiBF,IAAjB,EAAuB;AAAGK,MAAAA,gBAAgB,EAAE,UAArB;AACGC,MAAAA,OAAO,EAAE;AAAE,wBAAiB,iCAAgCN,IAAI,CAACO,SAAU,EAAlE;AACGC,QAAAA,cAAc,EAAEnD,OAAO,CAACC,GAAR,CAAYmD,uBAD/B;AAEGC,QAAAA,qBAAqB,EAAErD,OAAO,CAACC,GAAR,CAAYqD;AAFtC;AADZ,KAAvB,CAAlB;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACH,IAAhB;AACA9B,IAAAA,YAAY,CAAEiC,GAAG,CAACH,IAAJ,CAASc,QAAX,CAAZ;AACA1C,IAAAA,WAAW,CAAE,uCAAuC+B,GAAG,CAACH,IAAJ,CAASc,QAAlD,CAAX;AAGF;AACF;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAI;AACF;AACA;AACA;AAEMC,MAAAA,aAAa,CAACZ,GAAG,CAACH,IAAJ,CAASc,QAAV,CAAb;AACH,KANL,CAOI,OAAOE,CAAP,EAAU;AAAEJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBG,CAA5B;AAAgC;AACjD,GA/BD,CA/B6D,CAgE7D;;;AACA,QAAMD,aAAa,GAAG,MAAOE,IAAP,IAAgB;AACpC,UAAMzC,UAAU,EAAhB;AACA,UAAM0C,OAAO,GAAG,uBAAhB,CAFoC,CAIpC;;AACA,UAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,UAAMC,SAAS,GAAGF,IAAI,CAACG,OAAL,EAAlB;AACA,UAAMC,IAAI,GAAG,EAAE,GAAG5D,QAAL;AAAe6D,MAAAA,KAAK,EAAEN,OAAO,GAAGD,IAAhC;AAAsCQ,MAAAA,SAAS,EAAEJ;AAAjD,KAAb;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCU,IAAtC;AACAG,IAAAA,KAAK,CAAC,wBAAD,EAA2BH,IAA3B,CAAL;AAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAI;AACF;AACJ;AACA;AAEI;AACA,YAAMI,QAAQ,GAAGT,OAAO,GAAGD,IAA3B;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYc,QAAZ;AACA,YAAMC,CAAC,GAAG5E,MAAM,CAAC6E,KAAP,CAAaC,UAAb,CAAwBjE,QAAxB,CAAV;AACA,YAAMkE,CAAC,GAAG/E,MAAM,CAAC6E,KAAP,CAAaC,UAAb,CAAwBhE,SAAxB,CAAV;AACAkE,MAAAA,UAAU,CAACJ,CAAD,EAAIG,CAAJ,EAAOJ,QAAP,CAAV;AAED,KAZD,CAYE,OAAOX,CAAP,EAAU;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBG,CAA5B;AACD;AACF,GAnCD,CAjE6D,CAsG7D;;;AACA,QAAMgB,UAAU,GAAG,OAAOC,KAAP,EAAcC,KAAd,EAAqBC,QAArB,KAAkC;AACnDvB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC7C,OAAvC;;AACA,UAAMoE,SAAS,GAAG,IAAIpF,MAAM,CAACqF,QAAX,CAAoBrE,OAApB,EAA6BjB,cAA7B,EAA6C8C,MAA7C,CAAlB;;AACA,QAAI;AACF,YAAMyC,EAAE,GAAG,MAAMF,SAAS,CAACG,IAAV,CAAeN,KAAf,EAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCvE,IAAvC,CAAjB;AACAgD,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2ByB,EAAE,CAACrB,IAA1C;AAEAqB,MAAAA,EAAE,CAACE,IAAH,GAAUC,IAAV,CAAgBC,OAAD,IAAa;AAC1B,YAAIA,OAAO,CAACC,aAAR,KAA0B,CAA9B,EAAiC;AAC/B/B,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC6B,OAAlC;AACAnE,UAAAA,OAAO,CAACqE,IAAR,CAAc,YAAd,EAF+B,CAI/B;;AACAC,UAAAA,sBAAsB;AACvB;AACF,OARD;AASD,KAbD,CAaE,OAAO7B,CAAP,EAAU;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACD;AACF,GAnBD,CAvG6D,CA4H7D;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACA,QAAM6B,sBAAsB,GAAG,YAAY;AACzCjC,IAAAA,OAAO,CAACC,GAAR,CAAY7C,OAAZ,EADyC,CAE1C;;AAEF;AACD;AACA;AACA;AACA;AACA;AACG,GAVD;;AAYArB,EAAAA,SAAS,CAAC,MAAM;AACdoD,IAAAA,MAAM,CAAChC,GAAD,CAAN,CADc,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA3JD;;GAAML,I;UAQYZ,U;;;KARZY,I;AA6JN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport MOLCOMMONS_ABI from './MOLCOMMONS_ABI'\nimport { ethers } from 'ethers'\nimport { CommunityContext } from './GlobalContext'\nimport axios from 'axios';\nimport moralis from \"moralis\";\n\n\nmoralis.initialize(process.env.REACT_APP_MORALIS_APPLICATION_ID);\nmoralis.serverURL = process.env.REACT_APP_MORALIS_SERVER_URL;\n\n\nconst Mint = ({ metadata, sale, ethPrice, coinPrice, img }) => {\n  // ----- useContext\n  const { commons } = useContext(CommunityContext)\n  const [imageHash, setImageHash] = useState('');\n  const [imageUrl, setImageUrl] = useState('profile.jpg');\n  const [commonsAddress, setCommonsAddress] = useState(''); \n\n  // ----- Reaect Router Config\n  const history = useHistory()\n\n\n  const getCommons = async () =>\n                                        {\n                                            var commonsId =    window.location.search.substring( 11 );\n                                            const query = new moralis.Query( Commons );\n                                            query.equalTo( \"objectId\", commonsId );\n                                            const results = await query.find();\n                                            var commonsObject;\n                                            for ( let i = 0; i < results.length; i++ ) // wtf??? only expecting one result. gotta find acceptable solution for this\n                                            { \n                                                const object = results[i];\n                                                commonsObject = object;\n                                                setCommonsAddress( object.get('contractAddress') );\n                                            }\n                                        }\n\n  // ----- Smart Contract Config\n  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any')\n  const signer = provider.getSigner()\n\n  // ----- Upload image to Fleek Storage\n  const upload = async (data, contract) => {\n\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n    //let   data = new FormData();\n    //data.append(\"file\", selectedFile, selectedFile.name );\n    const res = await axios.post( url, data, {  maxContentLength: \"Infinity\", \n                                                headers: { \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n                                                            pinata_api_key: process.env.REACT_APP_PINATA_PUBLIC,\n                                                            pinata_secret_api_key: process.env.REACT_APP_PINATA_PRIVATE,            },\n                                              });\n    console.log(res.data);\n    setImageHash( res.data.IpfsHash );\n    setImageUrl( 'https://gateway.pinata.cloud/ipfs/' + res.data.IpfsHash );\n\n\n  /*  const input = {\n      apiKey: process.env.REACT_APP_FLEEK_API_KEY,\n      apiSecret: process.env.REACT_APP_FLEEK_API_SECRET,\n      bucket: 'audsssy-team-bucket',\n      key: metadata.title,\n      data,\n    }*/\n\n    try {\n      //const result = await fleek.upload(input)\n      //console.log('this is image hash from fleek - ' + result.hash)\n      // Prepare to mint NFT\n\n            uploadAndMint(res.data.IpfsHash)\n        } \n        catch (e) { console.log('error is - ' + e) }\n  }\n\n  // ----- Upload tokenURI and Mint NFT\n  const uploadAndMint = async (hash) => {\n    await getCommons();\n    const baseUrl = 'https://ipfs.io/ipfs/'\n\n    // Add timestamp to metadata\n    const date = new Date()\n    const timestamp = date.getTime()\n    const dict = { ...metadata, image: baseUrl + hash, createdAt: timestamp }\n    console.log('tokenURI at mint is - ', dict)\n    alert('tokenURI at mint is - ', dict)\n\n  /*  const data = JSON.stringify(dict)\n    const i = {\n      apiKey: process.env.REACT_APP_FLEEK_API_KEY,\n      apiSecret: process.env.REACT_APP_FLEEK_API_SECRET,\n      bucket: 'audsssy-team-bucket',\n      key: hash,\n      data,\n    }\n*/\n    try {\n      // Uplaod tokenUri to Fleek\n  //    const result = await fleek.upload(i)\n  //    console.log('this is tokenUri hash from fleek - ' + result.hash)\n\n      // Mint NFT\n      const tokenUri = baseUrl + hash\n      console.log(tokenUri)\n      const p = ethers.utils.parseEther(ethPrice)\n      const c = ethers.utils.parseEther(coinPrice)\n      molCommons(p, c, tokenUri)\n  \n    } catch (e) {\n      console.log('error is - ' + e )\n    }\n  }\n\n  // ----- Mint Gamma with MolVault\n  const molCommons = async (price, coins, tokenURI) => {\n    console.log('MolVault contract is - ', commons)\n    const _contract = new ethers.Contract(commons, MOLCOMMONS_ABI, signer)\n    try {\n      const tx = await _contract.mint(price, coins, tokenURI, sale)\n      console.log('tx.hash for minting - ' + tx.hash)\n\n      tx.wait().then((receipt) => {\n        if (receipt.confirmations === 1) {\n          console.log('mint receipt is - ', receipt)\n          history.push(`/community`)\n\n          // Store user address to Firestore\n          addMinterToCoinHolders()\n        }\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  // ----- Listen to contract events\n  // function contractListener(contract) {\n  //   contract.on('Transfer', (from, to, tokenId) => {\n  //     console.log('Token minted - ', from, to)\n  //     console.log('NFT tokenId minted - ' + tokenId)\n  //   })\n\n  //   contract.on('gRoyaltiesMinted', (contractAddress) => {\n  //     console.log('gRoyalties minted at contract address  - ', contractAddress)\n  //   })\n  // }\n\n  // Add minter to Firestore\n  const addMinterToCoinHolders = async () => {\n    console.log(commons)\n   // const docRef = projectFirestore.collection('vault').doc(commons)   \n    \n /*   signer.getAddress().then(address => {\n      console.log(address)\n       docRef.update({\n         holders: firebaseFieldValue.arrayUnion(address),\n       }) \n    })*/\n  }\n\n  useEffect(() => {\n    upload(img)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <div></div>\n}\n\nexport default Mint\n"]},"metadata":{},"sourceType":"module"}