{"ast":null,"code":"var _jsxFileName = \"/home/danielo/Development/ui/dashboardV1/src/Mint.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport fleek from '@fleekhq/fleek-storage-js';\nimport MOLCOMMONS_ABI from '../comps/MOLCOMMONS_ABI';\nimport { firebaseFieldValue, projectFirestore } from '../firebase/config';\nimport { ethers } from 'ethers';\nimport { CommunityContext } from '../GlobalContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Mint = ({\n  metadata,\n  sale,\n  ethPrice,\n  coinPrice,\n  img\n}) => {\n  _s();\n\n  // ----- useContext\n  const {\n    commons\n  } = useContext(CommunityContext);\n  const [imageHash, setImageHash] = useState('');\n  const [imageUrl, setImageUrl] = useState('profile.jpg'); // ----- Reaect Router Config\n\n  const history = useHistory(); // ----- Smart Contract Config\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n  const signer = provider.getSigner(); // ----- Upload image to Fleek Storage\n\n  const upload = async (data, contract) => {\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`; //let   data = new FormData();\n    //data.append(\"file\", selectedFile, selectedFile.name );\n\n    const res = await axios.post(url, data, {\n      maxContentLength: \"Infinity\",\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: process.env.REACT_APP_PINATA_PUBLIC,\n        pinata_secret_api_key: process.env.REACT_APP_PINATA_PRIVATE\n      }\n    });\n    console.log(res.data);\n    setImageHash(res.data.IpfsHash);\n    setImageUrl('https://gateway.pinata.cloud/ipfs/' + res.data.IpfsHash);\n    const input = {\n      apiKey: process.env.REACT_APP_FLEEK_API_KEY,\n      apiSecret: process.env.REACT_APP_FLEEK_API_SECRET,\n      bucket: 'audsssy-team-bucket',\n      key: metadata.title,\n      data\n    };\n\n    try {\n      const result = await fleek.upload(input);\n      console.log('this is image hash from fleek - ' + result.hash); // Prepare to mint NFT\n\n      uploadAndMint(result.hash);\n    } catch (e) {\n      console.log('error is - ' + e);\n    }\n  }; // ----- Upload tokenURI and Mint NFT\n\n\n  const uploadAndMint = async hash => {\n    const baseUrl = 'https://ipfs.io/ipfs/'; // Add timestamp to metadata\n\n    const date = new Date();\n    const timestamp = date.getTime();\n    const dict = { ...metadata,\n      image: baseUrl + hash,\n      createdAt: timestamp\n    };\n    console.log('tokenURI at mint is - ', dict);\n    const data = JSON.stringify(dict);\n    const i = {\n      apiKey: process.env.REACT_APP_FLEEK_API_KEY,\n      apiSecret: process.env.REACT_APP_FLEEK_API_SECRET,\n      bucket: 'audsssy-team-bucket',\n      key: hash,\n      data\n    };\n\n    try {\n      // Uplaod tokenUri to Fleek\n      const result = await fleek.upload(i);\n      console.log('this is tokenUri hash from fleek - ' + result.hash); // Mint NFT\n\n      const tokenUri = baseUrl + result.hash;\n      console.log(tokenUri);\n      const p = ethers.utils.parseEther(ethPrice);\n      const c = ethers.utils.parseEther(coinPrice);\n      molCommons(p, c, tokenUri);\n    } catch (e) {\n      console.log('error is - ' + e, i);\n    }\n  }; // ----- Mint Gamma with MolVault\n\n\n  const molCommons = async (price, coins, tokenURI) => {\n    console.log('MolVault contract is - ', commons);\n\n    const _contract = new ethers.Contract(commons, MOLCOMMONS_ABI, signer);\n\n    try {\n      const tx = await _contract.mint(price, coins, tokenURI, sale);\n      console.log('tx.hash for minting - ' + tx.hash);\n      tx.wait().then(receipt => {\n        if (receipt.confirmations === 1) {\n          console.log('mint receipt is - ', receipt);\n          history.push(`/community`); // Store user address to Firestore\n\n          addMinterToCoinHolders();\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }; // ----- Listen to contract events\n  // function contractListener(contract) {\n  //   contract.on('Transfer', (from, to, tokenId) => {\n  //     console.log('Token minted - ', from, to)\n  //     console.log('NFT tokenId minted - ' + tokenId)\n  //   })\n  //   contract.on('gRoyaltiesMinted', (contractAddress) => {\n  //     console.log('gRoyalties minted at contract address  - ', contractAddress)\n  //   })\n  // }\n  // Add minter to Firestore\n\n\n  const addMinterToCoinHolders = async () => {\n    console.log(commons);\n    const docRef = projectFirestore.collection('vault').doc(commons);\n    signer.getAddress().then(address => {\n      console.log(address);\n      docRef.update({\n        holders: firebaseFieldValue.arrayUnion(address)\n      });\n    });\n  };\n\n  useEffect(() => {\n    upload(img); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Mint, \"rDcu6njjGLbIq4RiS6fREUasfUE=\", false, function () {\n  return [useHistory];\n});\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/home/danielo/Development/ui/dashboardV1/src/Mint.js"],"names":["React","useEffect","useContext","useHistory","fleek","MOLCOMMONS_ABI","firebaseFieldValue","projectFirestore","ethers","CommunityContext","Mint","metadata","sale","ethPrice","coinPrice","img","commons","imageHash","setImageHash","useState","imageUrl","setImageUrl","history","provider","providers","Web3Provider","window","ethereum","signer","getSigner","upload","data","contract","url","res","axios","post","maxContentLength","headers","_boundary","pinata_api_key","process","env","REACT_APP_PINATA_PUBLIC","pinata_secret_api_key","REACT_APP_PINATA_PRIVATE","console","log","IpfsHash","input","apiKey","REACT_APP_FLEEK_API_KEY","apiSecret","REACT_APP_FLEEK_API_SECRET","bucket","key","title","result","hash","uploadAndMint","e","baseUrl","date","Date","timestamp","getTime","dict","image","createdAt","JSON","stringify","i","tokenUri","p","utils","parseEther","c","molCommons","price","coins","tokenURI","_contract","Contract","tx","mint","wait","then","receipt","confirmations","push","addMinterToCoinHolders","docRef","collection","doc","getAddress","address","update","holders","arrayUnion"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport fleek from '@fleekhq/fleek-storage-js'\nimport MOLCOMMONS_ABI from '../comps/MOLCOMMONS_ABI'\nimport {firebaseFieldValue, projectFirestore} from '../firebase/config'\nimport { ethers } from 'ethers'\nimport { CommunityContext } from '../GlobalContext'\n\n\nconst Mint = ({ metadata, sale, ethPrice, coinPrice, img }) => {\n  // ----- useContext\n  const { commons } = useContext(CommunityContext)\n  const [imageHash, setImageHash] = useState('');\n  const [imageUrl, setImageUrl] = useState('profile.jpg');\n  \n  // ----- Reaect Router Config\n  const history = useHistory()\n\n  // ----- Smart Contract Config\n  const provider = new ethers.providers.Web3Provider(window.ethereum, 'any')\n  const signer = provider.getSigner()\n\n  // ----- Upload image to Fleek Storage\n  const upload = async (data, contract) => {\n\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n    //let   data = new FormData();\n    //data.append(\"file\", selectedFile, selectedFile.name );\n    const res = await axios.post( url, data, {  maxContentLength: \"Infinity\", \n                                                headers: { \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n                                                            pinata_api_key: process.env.REACT_APP_PINATA_PUBLIC,\n                                                            pinata_secret_api_key: process.env.REACT_APP_PINATA_PRIVATE,            },\n                                              });\n    console.log(res.data);\n    setImageHash( res.data.IpfsHash );\n    setImageUrl( 'https://gateway.pinata.cloud/ipfs/' + res.data.IpfsHash );\n\n\n    const input = {\n      apiKey: process.env.REACT_APP_FLEEK_API_KEY,\n      apiSecret: process.env.REACT_APP_FLEEK_API_SECRET,\n      bucket: 'audsssy-team-bucket',\n      key: metadata.title,\n      data,\n    }\n\n    try {\n      const result = await fleek.upload(input)\n      console.log('this is image hash from fleek - ' + result.hash)\n\n      // Prepare to mint NFT\n      uploadAndMint(result.hash)\n    } catch (e) {\n      console.log('error is - ' + e)\n    }\n  }\n\n  // ----- Upload tokenURI and Mint NFT\n  const uploadAndMint = async (hash) => {\n    const baseUrl = 'https://ipfs.io/ipfs/'\n\n    // Add timestamp to metadata\n    const date = new Date()\n    const timestamp = date.getTime()\n    const dict = { ...metadata, image: baseUrl + hash, createdAt: timestamp }\n    console.log('tokenURI at mint is - ', dict)\n\n    const data = JSON.stringify(dict)\n    const i = {\n      apiKey: process.env.REACT_APP_FLEEK_API_KEY,\n      apiSecret: process.env.REACT_APP_FLEEK_API_SECRET,\n      bucket: 'audsssy-team-bucket',\n      key: hash,\n      data,\n    }\n\n    try {\n      // Uplaod tokenUri to Fleek\n      const result = await fleek.upload(i)\n      console.log('this is tokenUri hash from fleek - ' + result.hash)\n\n      // Mint NFT\n      const tokenUri = baseUrl + result.hash\n      console.log(tokenUri)\n      const p = ethers.utils.parseEther(ethPrice)\n      const c = ethers.utils.parseEther(coinPrice)\n      molCommons(p, c, tokenUri)\n  \n    } catch (e) {\n      console.log('error is - ' + e, i)\n    }\n  }\n\n  // ----- Mint Gamma with MolVault\n  const molCommons = async (price, coins, tokenURI) => {\n    console.log('MolVault contract is - ', commons)\n    const _contract = new ethers.Contract(commons, MOLCOMMONS_ABI, signer)\n    try {\n      const tx = await _contract.mint(price, coins, tokenURI, sale)\n      console.log('tx.hash for minting - ' + tx.hash)\n\n      tx.wait().then((receipt) => {\n        if (receipt.confirmations === 1) {\n          console.log('mint receipt is - ', receipt)\n          history.push(`/community`)\n\n          // Store user address to Firestore\n          addMinterToCoinHolders()\n        }\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  // ----- Listen to contract events\n  // function contractListener(contract) {\n  //   contract.on('Transfer', (from, to, tokenId) => {\n  //     console.log('Token minted - ', from, to)\n  //     console.log('NFT tokenId minted - ' + tokenId)\n  //   })\n\n  //   contract.on('gRoyaltiesMinted', (contractAddress) => {\n  //     console.log('gRoyalties minted at contract address  - ', contractAddress)\n  //   })\n  // }\n\n  // Add minter to Firestore\n  const addMinterToCoinHolders = async () => {\n    console.log(commons)\n    const docRef = projectFirestore.collection('vault').doc(commons)   \n    \n    signer.getAddress().then(address => {\n      console.log(address)\n       docRef.update({\n         holders: firebaseFieldValue.arrayUnion(address),\n       }) \n    })\n  }\n\n  useEffect(() => {\n    upload(img)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <div></div>\n}\n\nexport default Mint\n"]},"metadata":{},"sourceType":"module"}